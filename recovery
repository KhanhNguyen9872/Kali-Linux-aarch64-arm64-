#!/data/data/com.termux/files/usr/bin/bash
clear
red='\033[1;31m' 2> /dev/null
green='\033[1;32m' 2> /dev/null
yellow='\033[1;33m' 2> /dev/null
blue='\033[1;34m' 2> /dev/null
light_cyan='\033[1;96m' 2> /dev/null
reset='\033[0m' 2> /dev/null
cpucheck="$(getprop ro.product.cpu.abi)"
case ${cpucheck} in
    arm64-v8a)
		unset cpucheck
        ;;
    armeabi|armeabi-v7a)
		printf " ARCH: $(getprop ro.product.cpu.abi) (armhf)"
		printf " @ Unsupported CPU"
		exit 1
        ;;
    *)
		printf " ARCH: $(getprop ro.product.cpu.abi) (${cpucheck})"
		printf "\n\n\n @ Unsupported CPU \n\n"
		exit 1
        ;;
esac
numberkhanh='^[0-9]+$' 2> /dev/null
exitkey=0 2> /dev/null
key=0 2> /dev/null
cd 2> /dev/null
cd .. 2> /dev/null
if [ -f usr/bin/firstbootcheck ] 2> /dev/null; then
	firstbootcheck=1 2> /dev/null
else
	echo 'update_enable' > usr/bin/settingsupdate 2> /dev/null
	echo 'update_enable' > usr/bin/settingsupdatekali 2> /dev/null
	echo 'checkboot' > usr/bin/firstbootcheck 2> /dev/null
fi
clear
cd 2> /dev/null
cd .. 2> /dev/null
khanh=usr/bin/khanh 2> /dev/null
if [ -f $khanh ]; then
	left=4 2> /dev/null
	khanh1="$(grep '' './usr/bin/khanh')" 2> /dev/null
	while [[ $left -eq 4 ]] 2> /dev/null || [[ $left -eq 3 ]] 2> /dev/null || [[ $left -eq 2 ]] 2> /dev/null || [[ $left -eq 1 ]] 2> /dev/null; do
		clear
		if [[ $wrong -eq 1 ]] 2> /dev/null; then
			printf "\n ${red} - Wrong Password! $left attempts left! ${reset}\n\n"
		fi
		if [[ $left -eq 0 ]] 2> /dev/null; then
			clear
			printf "\n\n ${red} - Wrong Password! Exit! ${reset}\n\n"
			exit 0
		fi
		printf "${light_cyan}\n   Type your Password! ${reset}\n\n"
		read -p "Password: " anykey
		if [[ $anykey -eq $khanh1 ]] 2> /dev/null || [ $anykey = $khanh1 ] 2> /dev/null; then
			printf "\n ${yellow} - PASS! ${reset}\n"
			newpass=1 2> /dev/null
			break
		else
			wrong=1 2> /dev/null
			left=$((left-1)) 2> /dev/null
		fi
	done
	if [[ $left -eq 0 ]] 2> /dev/null; then
		clear
		printf "\n\n ${red} - Wrong Password! Exit! ${reset}\n\n"
		exit 0
	fi
else
	notset=1 2> /dev/null
fi
clear
echo "- Booting into Recovery Mode...."
echo "- Preparing..."
echo "- Getting file... "
cd
cd kali-arm64 2> /dev/null
cd bin 2> /dev/null
if [ -f cp ] 2> /dev/null; then
	nonsystem=0 2> /dev/null
else
	nonsystem=1 2> /dev/null
fi
khanhnguyen="v3.3" 2> /dev/null
cd 2> /dev/null
cd .. 2> /dev/null
if [ -f usr/bin/khanhwake ] 2> /dev/null; then
	wake=0
else
	wake=1
fi
if [ -f usr/bin/khanhssh ] 2> /dev/null; then
	startssh=0
else
	startssh=1
fi
if [ -f usr/bin/settingsupdatekali ] 2> /dev/null; then
	wget -O version https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/version 2> /dev/null && echo " " 2> /dev/null
	wget -O changelogver https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/changelogver 2> /dev/null && echo " " 2> /dev/null
	if [ -f changelogver ] 2> /dev/null; then
		updatechangelog="$(grep '' './changelogver')" 2> /dev/null
		rm -f changelogver 2> /dev/null
	else
		nonetwork=1 2> /dev/null
	fi
	if [ -f version ] 2> /dev/null; then
		update="$(grep '' './version')" 2> /dev/null
	else
		nonetwork=1 2> /dev/null
	fi
	if [[ $update -eq '' ]] 2> /dev/null; then
		nonetwork=1 2> /dev/null
	fi
	settingsupdatekalinum=1 2> /dev/null
else
	settingsupdatekalinum=0 2> /dev/null
fi	
cd 2> /dev/null
cd .. 2> /dev/null
if [ -f usr/bin/settingsupdate ] 2> /dev/null; then
	wget -O versionrecovery https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/versionrecovery 2> /dev/null && echo " " 2> /dev/null
	wget -O changelogversion https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/changelogversion 2> /dev/null && echo " " 2> /dev/null
	wget -O requiredreinstall https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/requiredreinstall 2> /dev/null && echo " " 2> /dev/null
	if [ -f changelogversion ] 2> /dev/null; then
		updaterecoverychangelog="$(grep '' './changelogversion')" 2> /dev/null
		rm -f changelogversion 2> /dev/null
	else
		nonetwork=1 2> /dev/null
	fi
	if [ -f requiredreinstall ] 2> /dev/null; then
		requiredreinstalllog="$(grep '' './requiredreinstall')" 2> /dev/null
		rm -f requiredreinstall 2> /dev/null
	else
		nonetwork=1 2> /dev/null
	fi
	if [ -f versionrecovery ] 2> /dev/null; then
		updaterecovery="$(grep '' './versionrecovery')" 2> /dev/null
	else
		nonetwork=1 2> /dev/null
	fi
	if [[ $updaterecovery -eq '' ]] 2> /dev/null; then
		nonetwork=1 2> /dev/null
	fi
	settingsupdatenum=1 2> /dev/null
else
	settingsupdatenum=0 2> /dev/null
fi
cd 2> /dev/null
cd .. 2> /dev/null
if [ -f usr/bin/settingsupdatekali ] 2> /dev/null; then
	#freespace="$(df | grep -o '/data.*%' | grep -o '[0-9]* *[0-9]*%' | grep -o '[0-9][0-9]* ')" 2> /dev/null
	#freespace1=$((freespace/1024)) 2> /dev/null
	#if [[ $freespace1 -eq 0 ]] 2> /dev/null; then
		#freespace="$(df | tr -s ' ' $'\t' | grep data | cut -f4 | awk 'END {print $1}')" 2> /dev/null
		#freespace1=$((freespace/1024)) 2> /dev/null
	#fi
	#if [[ $freespace1 -eq 0 ]] 2> /dev/null; then
		#key=2 2> /dev/null
	#fi
	#if [[ $key -eq 2 ]] 2> /dev/null; then
		#notcompatible=1 2> /dev/null
	#fi
	pass=1
else
	key=0
	notcompatible=0
fi
cd 2> /dev/null
cd .. 2> /dev/null
if [ -f usr/bin/version ] 2> /dev/null; then
	ver="$(grep '' 'usr/bin/version')" 2> /dev/null
fi
if [ -f usr/bin/versionrecovery ] 2> /dev/null; then
	verrecovery="$(grep '' 'usr/bin/versionrecovery')" 2> /dev/null
fi
cd 2> /dev/null
clear
sleep 1 2> /dev/null
echo " @ RECOVERY MODE"
printf "${green}\n"
if [[ $settingsupdatekalinum -eq 1 ]] 2> /dev/null; then
	echo "=============================="
	printf "\n"
	printf "${green} - Checking for updates Kali.... \n"
	sleep 0.5 2> /dev/null
	if [[ nonetwork -eq 1 ]] 2> /dev/null; then
		printf "${red}\n No connection are available! \n\n"
		printf "${red} Required Internet to check update! \n\n"
		printf "${red} Skip check for update! \n\n"
		sleep 1 2> /dev/null
	else
		cd ..
		cd home 2> /dev/null
		cd kali-arm64 2> /dev/null
		cd bin 2> /dev/null
		if [ -f cp ] 2> /dev/null; then
			cd 2> /dev/null
			cd .. 2> /dev/null
			if [ -f usr/bin/version ] 2> /dev/null; then
				echo '1' > /dev/null
			else
				if [ -f usr/bin/versionrestore ] 2> /dev/null; then
					printf "${yellow}\n Custom Image is detected! Not Official! \n"
					custom=1 2> /dev/null
				else
					printf "${red}\n Installed / Can't detect version Kali! \n"
					kalifail=1 2> /dev/null
				fi
			fi
		else
			cd
			cd ..
			cd ..
			cd bin 2> /dev/null
			if [ -f cp ] 2> /dev/null; then
				printf "${yellow}\n Detected installed on unknown location!\n"
				printf "${yellow}\n Recovery will now exit!\n"
				exit 0
			else
				printf "${red}\n Kali-Linux is not installed! \n"
				kalifail=1 2> /dev/null
				nonsystem=1 2> /dev/null
				updatek=1 2> /dev/null
			fi
		fi
		cd 2> /dev/null
		if [[ $ver -ge $update ]] 2> /dev/null; then
			printf "${light_cyan} Installed: $ver \n"
			printf "${green} - No updates Kali are available!\n\n"
			cd .. 2> /dev/null
			rm -f version 2> /dev/null
			cd 2> /dev/null
			sleep 1 2> /dev/null
		else
			if [[ custom -eq 1 ]] 2> /dev/null; then
				rm -f version 2> /dev/null
				printf "${green} Skip check for update! \n\n"
			else
				if [[ kalifail -eq 1 ]] 2> /dev/null; then
					ver="null" 2> /dev/null
				fi
				cd 2> /dev/null
				cd .. 2> /dev/null
				rm -f version 2> /dev/null
				cd 2> /dev/null
				printf "${light_cyan} Installed: $ver \n"
				printf "${yellow} - New updates Kali are available!\n"
				printf "${yellow} - New version: $update \n"
				printf "${light_cyan}\n - Changelogs: \n"
				echo "$updatechangelog"
				if [[ $updatek -eq 1 ]] 2> /dev/null; then
					echo 'khanh' 2> /dev/null
				else
					if [ $requiredreinstalllog == "y" ] 2> /dev/null; then
						printf "${red}\n\n - THIS UPDATE REQUIRED REINSTALL!\n"
						printf " - This will remove your data! Please backup first!\n\n"
					else
						printf "${yellow}\n\n - Update will keep your personal data! \n\n"
					fi
				fi
				printf "${light_cyan}\n - Do you want to install it now? [Y/N] \n"
				read -r -p "Your choose: " response
				printf "%b\n" " "
				if [ $response == 'y' ] 2> /dev/null || [ $response == 'Y' ] 2> /dev/null; then
					if [ $requiredreinstalllog == "y" ] 2> /dev/null; then
						printf "${light_cyan}\n - Last Warning! Kali-Linux will be removed! [Y/N] \n"
						read -r -p "Your choose: " response
					fi
				fi
				case "$response" in
					[y]|[Y]) 
						cd
						printf "%b\n" "${yellow} - Updating... \n"
						if [ $requiredreinstalllog == "y" ] 2> /dev/null; then
							printf "%b\n" "${yellow} - Uninstall Kali-Linux... \n"
							rm -rf kali-arm64 2> /dev/null
						fi
						#if [[ $key -eq 2 ]] 2> /dev/null; then
							#echo "Free space check: Skip! Because Not Compatible!"
						#else
							#wget -O freespaceimageupdate https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/freespaceimageupdate 2> /dev/null
							#requiredfreespace="$(grep '' './freespaceimageupdate')" 2> /dev/null
							#rm -f freespaceimageupdate 2> /dev/null
							#if [[ $freespace1 -ge $requiredfreespace ]] 2> /dev/null; then
								#passfreespace=1 2> /dev/null
								#pass000=1
							#else
								#printf "${red}\n\n Your device don't have enough space!\n"
								#printf "${red}\n Do you want to continue? [Y/N]\n\n${reset}"
								#read -r -p "Your choose: " response
								#if [ $response = 'Y' ] | [ $response = 'y' ] 2> /dev/null; then
									#passfreespace=1 2> /dev/null
								#else
									#passfreespace=0 2> /dev/null
								#fi
							#fi
							#if [[ $passfreespace -eq 1 ]] 2> /dev/null; then
								#echo "Free space check: OK"
								#echo " "
							#else
								#echo "Exit Recovery!"
								#echo " "
								#exit
							#fi
						#fi
						wget -O kali-khanhnguyenup.sh https://tinyurl.com/9fzu2ex9 2> /dev/null
						wget -O version https://tinyurl.com/53n7htrn 2> /dev/null
						update5="$(grep '' './kali-khanhnguyenup.sh')" 2> /dev/null
						update6="$(grep '' './version')" 2> /dev/null
						if [[ $update5 -eq '' ]] 2> /dev/null; then
							if [[ $update6 -eq '' ]] 2> /dev/null; then
								printf "${red}\n No connection are available! \n\n"
								printf "${red} Required Internet to update! \n\n"
								rm -f kali-khanhnguyenup.sh 2> /dev/null
								rm -f version 2> /dev/null
							else
								printf "${red}\n No connection are available! \n\n"
								printf "${red} Required Internet to update! \n\n"
								rm -f kali-khanhnguyenup.sh 2> /dev/null
								rm -f version 2> /dev/null
							fi
						else
							chmod +x ~/kali-khanhnguyenup.sh 2> /dev/null
							sh ~/kali-khanhnguyenup.sh && echo "Process ended!"
							printf "%b" "\n\n"
						fi
						read -p " Press Enter to exit " anykey
						;;
					*)
						;;
				esac
			fi
		fi
	fi
fi
if [[ $settingsupdatenum -eq 1 ]] 2> /dev/null; then
	echo "=============================="
	printf "\n"
	printf "${green} - Checking for updates Recovery.... \n"
	sleep 0.5 2> /dev/null
	if [[ nonetwork -eq 1 ]] 2> /dev/null; then
		printf "${red}\n No connection are available! \n\n"
		printf "${red} Required Internet to check update! \n\n"
		customre=1 2> /dev/null
	fi
	cd ..
	if [ -f usr/bin/versionrecovery ] 2> /dev/null; then
		echo '1' > /dev/null
	else
		printf "${red}\n Can't detect version Recovery! \n"
		verrecovery="null" 2> /dev/null
	fi
	cd
	if [[ $customre -eq 1 ]] 2> /dev/null; then
		cd .. 2> /dev/null
		rm -f versionrecovery 2> /dev/null
		cd 2> /dev/null
		printf "${red} Skip check for update! \n\n"
		sleep 5
	else
		if [[ $verrecovery -ge $updaterecovery ]] 2> /dev/null; then
			printf "${light_cyan} Installed: $verrecovery \n"
			printf "${green} - No updates Recovery are available!\n\n"
			cd .. 2> /dev/null
			rm -f versionrecovery 2> /dev/null
			cd 2> /dev/null
			echo "=============================="
			sleep 4 2> /dev/null
		else
			cd .. 2> /dev/null
			rm -f versionrecovery 2> /dev/null
			cd 2> /dev/null
			printf "${light_cyan} Installed: $verrecovery \n"
			printf "${yellow} - New updates Recovery are available!\n"
			printf "${yellow} - New version: $updaterecovery \n"
			printf "${light_cyan}\n - Changelogs: \n"
			echo "$updaterecoverychangelog"
			printf "${light_cyan}\n\n - Do you want to update it now? [Y/N] \n"
			read -r -p "Your choose: " response
			printf "%b\n" " "
			case "$response" in
				[y]|[Y]) 
					printf "%b\n" "${yellow} - Updating... \n"
					cd 2> /dev/null
					wget -O recovery https://tinyurl.com/542f74rn 2> /dev/null
					wget -O versionrecovery https://tinyurl.com/fvcj5463 2> /dev/null
					update2="$(grep '' './versionrecovery')" 2> /dev/null
					if [[ $update2 -eq '' ]] 2> /dev/null; then
						printf "${red}\n No connection are available! \n"
						printf "${red}\n Required Internet to update Recovery! \n\n"
						rm -f recovery 2> /dev/null
						rm -f versionrecovery 2> /dev/null
					else
						cd .. 2> /dev/null
						mv home/recovery usr/bin/recovery 2> /dev/null
						mv home/versionrecovery usr/bin/versionrecovery 2> /dev/null
						chmod 777 usr/bin/recovery 2> /dev/null
						chmod 777 usr/bin/versionrecovery 2> /dev/null
						printf "%b\n\n" "${green} - Update successfully! \n"
						printf "${green} - Run recovery again! \n\n"
						exit 0
					fi
					read -p " Press Enter to continue " anykey
					;;
				*)
					;;
			esac
		fi
	fi
fi
cd 2> /dev/null
cd .. 2> /dev/null
if [ -f usr/bin/version ] 2> /dev/null; then
	ver="$(grep '' 'usr/bin/version')" 2> /dev/null
else
	ver="null" 2> /dev/null
fi
cd 2> /dev/null
if [ -f /system/bin/su ] 2> /dev/null; then
	su=1
else
	if [ -f /system/xbin/su ] 2> /dev/null; then
		su=1
	else
		if [ -f /system/bin/magisk ] 2> /dev/null; then
			su=1
		else
			if [ -f /system/bin/supolicy ] 2> /dev/null; then
				su=1
			else
				if [ -f /system/bin/magiskinit ] 2> /dev/null; then
					su=1
				else
					if [ -f /system/xbin/supolicy ] 2> /dev/null; then
						su=1
					else
						if [ -f /sbin/su ] 2> /dev/null; then
							su=1
						else
							if [ -f /data/local/xbin/su ] 2> /dev/null; then
								su=1
							else
								if [ -f /data/local/bin/su ] 2> /dev/null; then
									su=1
								else
									if [ -f /system/sd/xbin/su ] 2> /dev/null; then
										su=1
									else
										if [ -f /data/adb/magisk/magisk32 ] 2> /dev/null; then
											su=1
										else
											if [ -f  /system/app/Superuser.apk ] 2> /dev/null; then
												su=1
											else
												su=0
											fi
										fi
									fi
								fi
							fi
						fi
					fi
				fi
			fi
		fi
	fi
fi
androidver="$(getprop ro.build.version.sdk)" 2> /dev/null
if [ $androidver -eq 24 ] 2> /dev/null; then
	androidname="7.0" 2> /dev/null
else
	if [ $androidver -eq 25 ] 2> /dev/null; then
		androidname="7.1" 2> /dev/null
	else
		if [ $androidver -eq 26 ] 2> /dev/null; then
			androidname="8.0" 2> /dev/null
		else
			if [ $androidver -eq 27 ] 2> /dev/null; then
				androidname="8.1" 2> /dev/null
			else
				if [ $androidver -eq 28 ] 2> /dev/null; then
					androidname="9" 2> /dev/null
				else
					if [ $androidver -eq 29 ] 2> /dev/null; then
						androidname="10" 2> /dev/null
					else
						if [ $androidver -eq 30 ] 2> /dev/null; then
							androidname="11" 2> /dev/null
						else
							if [ $androidver -eq 31 ] 2> /dev/null; then
								androidname="12" 2> /dev/null
							else
								androidname="$(grep ro.build.version.release)" 2> /dev/null
							fi
						fi
					fi
				fi
			fi
		fi
	fi
fi
model="$(getprop ro.product.model)" 2> /dev/null
manu="$(getprop ro.product.manufacturer)" 2> /dev/null
keyandroid="$(getprop ro.build.fingerprint)" 2> /dev/null
id="$(getprop ro.build.id)" 2> /dev/null
#####
PS3=' - Your Choose: ' 2> /dev/null
entries=("Run Linux" "Backup" "Restore" "Reinstall" "Password" "Uninstall" "Settings" "About" "Exit")
while [ "$menu" != 1 ]; do
	#if [[ $key -eq 2 ]]; then
		#notcompatible=1
	#else
		#freespace="$(df | grep -o '/data.*%' | grep -o '[0-9]* *[0-9]*%' | grep -o '[0-9][0-9]* ')" 2> /dev/null
		#freespace1=$((freespace/1024)) 2> /dev/null
		#totalspace="$(df -h | awk 'END {print $2}')" 2> /dev/null
		#totalspace1="$(grep -Eo '[0-9]+' <<< $totalspace})" 2> /dev/null
		#if ! [[ $numberkhanh =~ $totalspace1 ]] 2> /dev/null; then
			#totalspace2=$totalspace1 2> /dev/null
		#else
			#totalspace2=$((totalspace1*1024)) 2> /dev/null
		#fi
		#if [[ $freespace1 -eq 0 ]] 2> /dev/null; then
			#freespace="$(df | tr -s ' ' $'\t' | grep data | cut -f4 | awk 'END {print $1}')" 2> /dev/null
			#freespace1=$((freespace/1024)) 2> /dev/null
			#key=1 2> /dev/null
		#fi
		#if [[ $key -eq 1 ]] 2> /dev/null; then
			#totalspace="$(df | grep '/data' | grep -Eo '[0-9]+' | awk 'NR==1{print $1}')" 2> /dev/null
			#totalspace2=$((totalspace/1024)) 2> /dev/null
		#fi
		#if [[ $totalspace2 -eq 0 ]] 2> /dev/null; then
			#key=2 2> /dev/null
		#fi
		#if [[ $freespace1 -eq 0 ]] 2> /dev/null; then
			#key=2 2> /dev/null
		#fi
		#if [[ $key -eq 2 ]] 2> /dev/null; then
			#notcompatible=1 2> /dev/null
		#fi
	#fi
	clear
	printf "${green}\n  @ RECOVERY MENU \n"
	printf "${green}  @ Version: $khanhnguyen \n"
	printf "${green}  @ Version Kali: $ver \n\n"
	printf "${blue}  @ Manufacturer: $manu\n"
	printf "${blue}  @ Model: $model\n"
	printf "${blue}  @ Android $androidname\n"
	printf "${blue}  @ ID: $id\n"
	printf "${blue}  @ Key: $keyandroid\n"
	if [[ $su -eq 1 ]] 2> /dev/null; then
		printf "${red}  @ Root: YES \n\n${reset}"
	else
		printf "${blue}  @ Root: NO \n\n${reset}"
	fi
	#if [[ $notcompatible -eq 1 ]] 2> /dev/null; then
		#printf "${red}    @ Total storage: Not Compatible\n"
		#printf "${red}    @ Free space:    Not Compatible\n\n"
	#else
		#printf "${yellow}    @ Total storage: $totalspace2 MB \n"
		#printf "${yellow}    @ Free space:    $freespace1 MB\n\n"
	#fi
	printf "${red} Menu: ${reset}\n"
	printf "${light_cyan}"
	select choice in "${entries[@]}"
	do 
		case $choice in
			"Run Linux")
				clear
				cd 2> /dev/null
				cd kali-arm64 2> /dev/null
				cd bin 2> /dev/null
				if [ -f cp ] 2> /dev/null; then
					kali
					menu=1 2> /dev/null
					exit 0
				else
					clear
					printf "${green}\n  @ RECOVERY MENU \n\n"
					printf "${green} -> Booting System... \n\n"
					printf "${red}\n Kali-Linux is not installed! \n\n"
					printf "${red} Please install Kali first! \n\n ${reset}"
					nonsystem=1 2> /dev/null
					read -p " Press Enter to exit " anykey
				fi
				break
				;;
			"Reinstall")
				settings=1 2> /dev/null
				while [[ $settings -eq 1 ]] 2> /dev/null; do
					clear
					printf "${green}\n  @ RECOVERY MENU \n\n"
					printf "${green} -> Reinstall Kali-Linux \n\n"
					if [[ $nonsystem -eq 1 ]] 2> /dev/null; then
						printf "${yellow}\n No system are installed! \n\n"
						read -r -p "Are you sure to reinstall Kali-Linux? [Y/N] " response
						printf "%b\n" " "
						case "$response" in
							[y]|[Y]) 
								cd 2> /dev/null
								#if [[ $key -eq 2 ]] 2> /dev/null; then
									#echo "Free space check: Skip! Because Not Compatible!"
								#else
									#wget -O freespaceimage https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/freespaceimage 2> /dev/null
									#requiredfreespace="$(grep '' './freespaceimage')" 2> /dev/null
									#rm -f freespaceimage 2> /dev/null
									#if [[ $freespace1 -ge $requiredfreespace ]] 2> /dev/null; then
										#passfreespace=1 2> /dev/null
										#pass000=1
									#else
										#printf "${red}\n\n Your device don't have enough space!\n"
										#printf "${red}\n Do you want to continue? [Y/N]\n\n${reset}"
										#read -r -p "Your choose: " response
										#if [ $response = 'Y' ] | [ $response = 'y' ] 2> /dev/null; then
											#passfreespace=1 2> /dev/null
										#else
											#passfreespace=0 2> /dev/null
										#fi
									#fi
									#if [[ $passfreespace -eq 1 ]] 2> /dev/null; then
										#echo "Free space check: OK"
										#echo " "
									#else
										#echo "Exit!"
										#echo " "
										#exit
									#fi
								#fi
								wget -O kali-khanhnguyen.sh https://tinyurl.com/ybw4xpmz 2> /dev/null
								update3="$(grep '' './kali-khanhnguyen.sh')" 2> /dev/null
								if [[ $update3 -eq '' ]] 2> /dev/null; then
									printf "${red}\n\n No connection are available! \n\n"
									printf "${red}\n Required Internet to Reinstall Kali! \n\n"
									rm -f kali-khanhnguyen.sh 2> /dev/null
								else
									rm -rf kali-arm64 2> /dev/null
									chmod +x ~/kali-khanhnguyen.sh 2> /dev/null
									sh ~/kali-khanhnguyen.sh && echo "Process ended!"
									rm -f kali-khanhnguyen.sh 2> /dev/null
									printf "%b" "\n\n"
								fi
								cd 2> /dev/null
								cd kali-arm64 2> /dev/null
								cd bin 2> /dev/null
								if [ -f cp ] 2> /dev/null; then
									nonsystem=0 2> /dev/null
								else
									nonsystem=1 2> /dev/null
								fi
								read -p " Press Enter to exit " anykey
								;;
							[n]|[N])
								settings=0 2> /dev/null
								break
								;;
							*)
								;;
						esac
					else
						printf "${yellow} 1. Reinstall with Keep your data\n"
						printf " 2. Reinstall with Lost your data\n"
						printf "${light_cyan} 0. Return to menu (or Enter) ${reset}\n\n"
						read -r -p "Your choose: " response1
						if [[ $response1 -eq 0 ]] 2> /dev/null; then
							settings=0 2> /dev/null
							break
						fi
						case "$response1" in
						  	[2])
								clear
								printf "${green}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Reinstall Kali-Linux \n\n"
								printf "${yellow} @ Reinstall will lost your data\n\n"
								read -r -p "Are you sure to reinstall Kali-Linux? [Y/N] " response
								printf "%b\n" " "
								case "$response" in
									[y]|[Y]) 
										cd 2> /dev/null
										wget -O kali-khanhnguyen.sh https://tinyurl.com/ybw4xpmz 2> /dev/null
										update3="$(grep '' './kali-khanhnguyen.sh')" 2> /dev/null
										if [[ $update3 -eq '' ]] 2> /dev/null; then
											printf "${red}\n\n No connection are available! \n\n"
											printf "${red}\n Required Internet to Reinstall Kali! \n\n"
											rm -f kali-khanhnguyen.sh 2> /dev/null
										else
											rm -rf kali-arm64 2> /dev/null
											chmod +x ~/kali-khanhnguyen.sh 2> /dev/null
											#if [[ $key -eq 2 ]] 2> /dev/null; then
												#echo "Free space check: Skip! Because Not Compatible!"
											#else
												#wget -O freespaceimage https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/freespaceimage 2> /dev/null
												#requiredfreespace="$(grep '' './freespaceimage')" 2> /dev/null
												#rm -f freespaceimage 2> /dev/null
												#if [[ $freespace1 -ge $requiredfreespace ]] 2> /dev/null; then
													#passfreespace=1 2> /dev/null
													#pass000=1
												#else
													#printf "${red}\n\n Your device don't have enough space!\n"
													#printf "${red}\n Do you want to continue? [Y/N]\n\n${reset}"
													#read -r -p "Your choose: " response
													#if [ $response = 'Y' ] | [ $response = 'y' ] 2> /dev/null; then
														#passfreespace=1 2> /dev/null
													#else
														#passfreespace=0 2> /dev/null
													#fi
												#fi
												#if [[ $passfreespace -eq 1 ]] 2> /dev/null; then
													#echo "Free space check: OK"
													#echo " "
												#else
													#echo "Exit Recovery!"
													#echo " "
													#exit
												#fi
											#fi
											sh ~/kali-khanhnguyen.sh && echo "Process ended!"
											rm -f kali-khanhnguyen.sh 2> /dev/null
											printf "%b" "\n\n"
										fi
										read -p " Press Enter to exit " anykey
										;;
									*)
										;;
								esac
				             	;;
						  	[1]) 
								clear
								printf "${green}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Reinstall Kali-Linux \n\n"
								printf "${yellow} @ Reinstall will keep your data\n\n"
								read -r -p "Are you sure to reinstall Kali-Linux? [Y/N] " response
								printf "%b\n" " "
								case "$response" in
									[y]|[Y]) 
										cd
										#if [[ $key -eq 2 ]] 2> /dev/null; then
											#echo "Free space check: Skip! Because Not Compatible!"
										#else
											#wget -O freespaceimageupdate https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/freespaceimageupdate 2> /dev/null
											#requiredfreespace="$(grep '' './freespaceimageupdate')" 2> /dev/null
											#rm -f freespaceimageupdate 2> /dev/null
											#if [[ $freespace1 -ge $requiredfreespace ]] 2> /dev/null; then
												#passfreespace=1 2> /dev/null
												#pass000=1
											#else
												#printf "${red}\n Your device don't have enough space!\n"
												#printf "${red}\n Do you want to continue? [Y/N]\n\n${reset}"
												#read -r -p "Your choose: " response
											#fi
											#if [ $response = 'Y' ] 2> /dev/null || [ $response = 'y' ] 2> /dev/null; then
												#passfreespace=1 2> /dev/null
											#else
												#passfreespace=0 2> /dev/null
											#fi
											#if [[ $passfreespace -eq 1 ]] 2> /dev/null; then
												#echo "Free space check: OK"
												#echo " "
											#else
												#echo "Exit Recovery!"
												#echo " "
												#exit
											#fi
										#fi
										wget -O kali-khanhnguyenup.sh https://tinyurl.com/9fzu2ex9 2> /dev/null
										update3="$(grep '' './kali-khanhnguyenup.sh')" 2> /dev/null
										if [[ $update3 -eq '' ]] 2> /dev/null; then
											printf "${red}\n\n No connection are available! \n\n"
											printf "${red}\n Required Internet to Reinstall Kali! \n\n"
											rm -f kali-khanhnguyenup.sh 2> /dev/null
										else
											chmod +x ~/kali-khanhnguyenup.sh 2> /dev/null
											sh ~/kali-khanhnguyenup.sh && echo "Process ended!"
											rm -f kali-khanhnguyenup.sh 2> /dev/null
											printf "%b" "\n\n"
										fi
										read -p " Press Enter to exit " anykey
										;;
									*)
										;;
								esac
				         	    ;;
					  		[3])
									;;
								*)
									;;
						esac
					fi
				done
				break
				;;
			"Backup")  
				clear
				printf "${red}\n  @ RECOVERY MENU \n\n"
				printf "${green} -> Backup Image \n\n"
				printf "${yellow} @ Default location backup is /sdcard \n\n"
				printf "${light_cyan} @@ High level may take a long time\n"
				printf "@@ Recommend is 0\n"
				level=99
				read -p "Compress level (0-9 or 9e): " level
				if [ $level == "9e" ] 2> /dev/null; then
					bypass=1
				else
					bypass=0
				fi
				if [[ $bypass -eq 0 ]]; then
					if [[ $level -ge 0 ]] 2> /dev/null && [[ $level -le 9 ]] 2> /dev/null; then
						printf "${yellow}\n Level is $level"
					else
						printf "${red}\n Level is unavailable! ${reset}\n\n"
						read -p "Press Enter to exit!" anykey
						break
					fi
				else
					printf "${yellow}\n Level is $level (9 - Extreme) [NOT RECOMMEND]"
				fi
				printf "\n\n${light_cyan}@ Higher CPU Cores will cause slow phone down and crash app!\n"
				printf "@ Recommend is 2 or 1!\n"
				read -p "CPU Cores (1-8): " level1
				if [[ $level1 -ge 1 ]] 2> /dev/null && [[ $level1 -le 8 ]] 2> /dev/null; then
					printf "${yellow}\n CPU Cores is $level1"
					if [[ $level1 -ge 2 ]] 2> /dev/null; then
						printf "${red}\n May take lag and crash app if you not have high end phone!"
					fi
				else
					printf "${red}\n CPU Cores is unavailable! ${reset}\n\n"
					read -p "Press Enter to exit!" anykey
					break
				fi
                printf "%b\n" "\n\n-----------------\n\n"
				printf "${blue} Target Backup: /sdcard/kali-arm64-backup.img \n"
				read -r -p "Are you sure to backup image? [Y/N] " response
				printf "%b\n" " "
				case "$response" in
					[y]|[Y]) 
							printf "\n${green} - Process: \n${light_cyan}"
							cd 2> /dev/null
							cd kali-arm64 2> /dev/null
							rm -rf tmp 2> /dev/null && mkdir tmp 2> /dev/null && chmod 777 tmp
							rm -rf data 2> /dev/null && rm -rf vendor 2> /dev/null && rm -rf product 2> /dev/null && rm -rf storage 2> /dev/null
							cd home 2> /dev/null
							cd khanh 2> /dev/null
							rm -f .bashrc.original 2> /dev/null
							rm -f .zsh_history 2> /dev/null
							rm -f .axs-dsound-server 2> /dev/null
							rm -f .bash_history 2> /dev/null
							rm -rf .cache 2> /dev/null
							rm -rf .gnupg 2> /dev/null
							cd 2> /dev/null
							cd kali-arm64 2> /dev/null
							cd root 2> /dev/null
							rm -f .bashrc.original 2> /dev/null
							rm -f .zsh_history 2> /dev/null
							rm -f .axs-dsound-server 2> /dev/null
							rm -f .bash_history 2> /dev/null
							rm -rf .cache 2> /dev/null
							rm -rf .gnupg 2> /dev/null
							cd 2> /dev/null
							cd kali-arm64 2> /dev/null
							cd usr/share 2> /dev/null
							rm -rf doc 2> /dev/null
							cd 2> /dev/null
							if [ -f temp.img ] 2> /dev/null; then
								rm -f temp.img 2> /dev/null
							fi
							XZ_OPT="-$level -T$level1" tar cJf - kali-arm64 -P | pv -s $(du -sb kali-arm64 | awk '{print $1}') | gzip > temp.tar.xz && echo "- Done backup image" > /sdcard/log.txt
							if [ -f temp.tar.xz ] 2> /dev/null; then
								printf "${yellow}\n - Please wait....\n ${reset}"
								7z e temp.tar.xz 2> /dev/null
							else
								printf "%b\n" " ${red} - Backup image failed! \n"
								exit 1
							fi
							if [ -f temp.tar ] 2> /dev/null; then
								if [ -f temp.tar.xz ] 2> /dev/null; then
									rm -f temp.tar.xz 2> /dev/null
								fi
								if [ -f /sdcard/kali-arm64-backup.img ] 2> /dev/null; then
									mv /sdcard/kali-arm64-backup.img /sdcard/kali-arm64-backup1.img 2> /dev/null
								fi
								mv temp.tar /sdcard/kali-arm64-backup.img 2> /dev/null
								bakfail=0
							else
								bakfail=1
							fi
							clear
							printf "${red}\n  @ RECOVERY MENU \n\n"
							printf "${green} -> Backup Image \n\n"
							printf "${yellow} @ Default location backup is /sdcard \n\n"
							cd 2> /dev/null
							if [[ $bakfail -eq 0 ]] 2> /dev/null; then
								printf "%b\n" " ${yellow} - Completed Backup Image! \n"
							else
								printf "%b\n" " ${red} - Backup image failed! \n"
								rm -f temp.tar.xz 2> /dev/null
								rm -f temp.tar 2> /dev/null
							fi
							read -p " Press Enter to exit " anykey
							;;
						*)
							;;
				esac
				break
				;;
			"Restore")
                clear
				printf "${red}\n  @ RECOVERY MENU \n\n"
                printf "${green} -> Restore Image \n\n"
                printf "${yellow} @ Please move Image to /sdcard and enter name file \n\n"
				printf "${yellow}  @@ Example your file in /sdcard/kali-arm64.img \n"
                printf "${yellow}  @@ Enter name image: kali-arm64.img \n\n"
                read -p "Enter Full name image: " restoreimage
				checkfile=/sdcard/$restoreimage 2> /dev/null
                printf "%b\n" "\n-----------------\n\n"
				printf "${blue} Target Image: /sdcard/$restoreimage \n"
				printf "${red}  @@@ Restore Image will erase current data! \n\n"
                read -r -p " Are you sure to restore image? [Y/N] " response
                case "$response" in
                      [y]|[Y]) 
                             printf "%b\n" "${yellow}\n -- Restore Image is in progress, please wait.... \n"
							 if [ -f $checkfile ] 2> /dev/null; then
					  			 printf "${green} restore image exist! \n"
					  			 printf "${yellow}\n -Preparing.... \n"
								 cd 2> /dev/null
								 wget -O restore-kali-khanhnguyen.sh https://tinyurl.com/37fhdpjb 2> /dev/null
								 update4="$(grep '' './restore-kali-khanhnguyen.sh')" 2> /dev/null
								 if [[ $update4 -eq '' ]] 2> /dev/null; then
							 		 printf "${red}\n\n No connection are available! \n\n"
							 		 printf "${red}\n Required Internet to Restore Image! \n\n"
							 		 rm -f restore-kali-khanhnguyen.sh 2> /dev/null
								 else
								 	 cd 2> /dev/null
								 	 cp /sdcard/$restoreimage restore-khanhnguyen.tar.xz 2> /dev/null
								 	 rm -rf ~/kali-arm64 2> /dev/null
								     chmod +x ~/restore-kali-khanhnguyen.sh 2> /dev/null
								 	 sh ~/restore-kali-khanhnguyen.sh && echo " - Process ended!"
									 rm -f restore-kali-khanhnguyen.sh 2> /dev/null && rm -f restore-khanhnguyen 2> /dev/null && rm -f restore-khanhnguyen.tar.xz 2> /dev/null
									 clear
									 printf "${red}\n  @ RECOVERY MENU \n\n"
									 printf "${green} -> Restore Image \n\n\n\n"
									 printf "${blue} Restore completed! ${reset}\n\n"
								 fi
							 else
					  			 printf "${red} restore image not exist! \n"
					  			 printf "${red} Please check path restore image file! \n\n"
							 fi
							 read -p "Press Enter to exit" anykey
                             ;;
                       *)
                             ;;
                esac
                break
                ;;
			"Settings")
				settings=1 2> /dev/null
				while [[ $settings -eq 1 ]] 2> /dev/null; do
					cd 2> /dev/null
					cd .. 2> /dev/null
					if [ -f usr/bin/settingsupdate ] 2> /dev/null; then
						settingsupdate='Enabled' 2> /dev/null
						settingsupdatenum=1 2> /dev/null
					else
						settingsupdate='Disabled' 2> /dev/null
						settingsupdatenum=0 2> /dev/null
					fi
					if [ -f usr/bin/settingsupdatekali ] 2> /dev/null; then
						settingsupdatekali='Enabled' 2> /dev/null
						settingsupdatekalinum=1 2> /dev/null
					else
						settingsupdatekali='Disabled' 2> /dev/null
						settingsupdatekalinum=0 2> /dev/null
					fi
					if [[ $wake -eq 1 ]] 2> /dev/null; then
						settingswake='Enabled' 2> /dev/null
					else
						settingswake='Disabled' 2> /dev/null
					fi
					if [[ $startssh -eq 1 ]] 2> /dev/null; then
						settingssh='Enabled' 2> /dev/null
					else
						settingssh='Disabled' 2> /dev/null
					fi
					cd 2> /dev/null
                	clear
					printf "${red}\n  @ RECOVERY MENU \n\n"
                	printf "${green} -> Settings \n\n\n"
					printf "${yellow} 1. Check update Recovery [$settingsupdate]\n"
					printf " 2. Check update Kali [$settingsupdatekali]\n"
					printf " 3. Wake Lock [$settingswake]\n"
					printf " 4. SSH Server [$settingssh]\n"
					printf " 5. Reinstall Recovery [For Development]\n"
					printf " 6. Reinstall Launcher [if you can't start kali command]\n"
					printf " 7. Install Audio app [For audio Kali-Linux]\n"
					printf " 8. Install Micro app [For microphone Kali-Linux]\n"
					printf "${light_cyan} 0. Return to menu (or Enter) ${reset}\n\n"
					read -r -p "Your choose: " response1
					if [[ $response1 -eq 0 ]] 2> /dev/null; then
						settings=0 2> /dev/null
						break
					fi
					case "$response1" in
						 [1])	
								if [[ $settingsupdatenum -eq 1 ]] 2> /dev/null; then
									cd 2> /dev/null
									cd .. 2> /dev/null
									rm -f usr/bin/settingsupdate 2> /dev/null
									settingsupdatenum=0 2> /dev/null
								else
									cd 2> /dev/null
									cd .. 2> /dev/null
									echo 'update_enable' > usr/bin/settingsupdate 2> /dev/null
									settingsupdatenum=1 2> /dev/null
								fi
								;;
					 	 [2]) 
								if [[ $settingsupdatekalinum -eq 1 ]] 2> /dev/null; then
									cd 2> /dev/null
									cd .. 2> /dev/null
									rm -f usr/bin/settingsupdatekali 2> /dev/null
									settingsupdatekalinum=0 2> /dev/null
								else
									cd 2> /dev/null
									cd .. 2> /dev/null
									echo 'update_enable' > usr/bin/settingsupdatekali 2> /dev/null
									settingsupdatekalinum=1 2> /dev/null
								fi
								;;
						 [3]) 
								if [[ $wake -eq 1 ]] 2> /dev/null; then
									cd 2> /dev/null
									cd .. 2> /dev/null
									echo 'khanh' > usr/bin/khanhwake 2> /dev/null
									wake=0 2> /dev/null
									cd 2> /dev/null
									sed -i '/termux-wake-lock/d' ./.bash_profile 2> /dev/null
									termux-wake-unlock
								else
									wake=1 2> /dev/null
									cd 2> /dev/null
									echo "termux-wake-lock" >> ./.bash_profile 2> /dev/null
									cd .. 2> /dev/null
									rm -f usr/bin/khanhwake 2> /dev/null
									cd 2> /dev/null
									termux-wake-lock
								fi
								;;
						 [5]) 
								clear
								printf "${red}\n  @ RECOVERY MENU \n\n"
                				printf "${green} -> Settings \n\n\n"
                				printf "${yellow} @ Reinstall Recovery\n\n"
                				printf "${red}- Reinstall only for Development or when you have Error\n\n${reset}"
                				printf "${light_cyan} Do you want to Reinstall Recovery? [Y/N] \n"
                				read -p "Your Choose: " anykey
                				if [ $anykey = 'y' ] 2> /dev/null || [ $anykey = 'Y' ] 2> /dev/null; then
									printf "%b\n" "${yellow}\n - Reinstall Recovery.... \n"
									cd
									wget -O recovery https://tinyurl.com/542f74rn 2> /dev/null
									wget -O versionrecovery https://tinyurl.com/fvcj5463 2> /dev/null
									update2="$(grep '' './versionrecovery')" 2> /dev/null
									if [[ $update2 -eq '' ]] 2> /dev/null; then
										printf "${red}\n No connection are available! \n"
										printf "${red}\n Required Internet to Reinstall Recovery! \n\n"
										rm -f recovery 2> /dev/null
										rm -f versionrecovery 2> /dev/null
									else
										cd .. 2> /dev/null
										mv home/recovery usr/bin/recovery 2> /dev/null
										mv home/versionrecovery usr/bin/versionrecovery 2> /dev/null
										chmod 777 usr/bin/recovery 2> /dev/null
										chmod 777 usr/bin/versionrecovery 2> /dev/null
										printf "%b\n\n" "${green} - Reinstall successfully! \n"
										printf "${green} - Run recovery again! \n\n"
										exit 0
									fi
									read -p " Press Enter to continue " anykey
								fi
								;;
						 [6]) 
								clear
								printf "${red}\n  @ RECOVERY MENU \n\n"
                				printf "${green} -> Settings \n\n\n"
                				printf "${yellow} @ Reinstall Kali Launcher\n\n"
                				printf "${red}- Reinstall Kali Launcher (kali) if you can't start kali command!\n\n${reset}"
                				printf "${light_cyan} Do you want to Reinstall Launcher? [Y/N] \n"
                				read -p "Your Choose: " anykey
                				if [ $anykey = 'y' ] 2> /dev/null || [ $anykey = 'Y' ] 2> /dev/null; then
									printf "%b\n" "${yellow}\n - Reinstall Kali Launcher.... \n"
									cd
									wget -O kali https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/kali 2> /dev/null
									wget -O khanh https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/khanh 2> /dev/null
									wget -O debian https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/debian.sh 2> /dev/null
									wget -O khanhaudio_tcp https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/khanhaudio_tcp.sh 2> /dev/null
									wget -O khanhi386 https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/khanhi386.sh 2> /dev/null
									wget -O khanhzoom https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/khanhzoom.sh 2> /dev/null
									wget -O recovery https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/recovery.sh 2> /dev/null
									wget -O virtualmic https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/virtualmic.sh 2> /dev/null
									wget -O virtmic https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/virtmic.sh 2> /dev/null
									wget -O khanhnguyen9872 https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/khanhnguyen9872.sh 2> /dev/null
									wget -O encryptbash https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/encryptbash.sh 2> /dev/null
									wget -O khanh_tcp_stop https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/khanh_tcp_stop.sh 2> /dev/null
									wget -O khanhip https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/khanhip.py 2> /dev/null
									wget -O fixoffice https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/scripts/fixoffice.py 2> /dev/null
									wget -O start_ssh https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/start_ssh 2> /dev/null
									update2="$(grep '' './kali')" 2> /dev/null
									update3="$(grep '' './khanh')" 2> /dev/null
									if [[ $update2 -eq '' ]] 2> /dev/null; then
										printf "${red}\n No connection are available! \n"
										printf "${red}\n Required Internet to Reinstall Launcher! \n\n"
										rm -f kali 2> /dev/null
										rm -f khanh 2> /dev/null
										rm -f debian 2> /dev/null
										rm -f khanhaudio_tcp 2> /dev/null
										rm -f khanhi386 2> /dev/null
										rm -f khanhzoom 2> /dev/null
										rm -f recovery 2> /dev/null
										rm -f virtualmic 2> /dev/null
										rm -f virtmic 2> /dev/null
										rm -f debian 2> /dev/null
										rm -f khanhnguyen9872 2> /dev/null
										rm -f encryptbash 2> /dev/null
										rm -f khanh_tcp_stop 2> /dev/null
										rm -f khanhip 2> /dev/null
										rm -f fixoffice 2> /dev/null
										rm -f start_ssh 2> /dev/null
									else
										if [[ $update3 -eq '' ]] 2> /dev/null; then
											printf "${red}\n No connection are available! \n"
											printf "${red}\n Required Internet to Reinstall Launcher! \n\n"
											rm -f kali 2> /dev/null
											rm -f khanh 2> /dev/null
											rm -f debian 2> /dev/null
											rm -f khanhaudio_tcp 2> /dev/null
											rm -f khanhi386 2> /dev/null
											rm -f khanhzoom 2> /dev/null
											rm -f recovery 2> /dev/null
											rm -f virtualmic 2> /dev/null
											rm -f virtmic 2> /dev/null
											rm -f debian 2> /dev/null
											rm -f khanhnguyen9872 2> /dev/null
											rm -f encryptbash 2> /dev/null
											rm -f khanh_tcp_stop 2> /dev/null
											rm -f khanhip 2> /dev/null
											rm -f fixoffice 2> /dev/null
											rm -f start_ssh 2> /dev/null
										else
											cd 2> /dev/null
											mv khanh kali-arm64/usr/bin/khanh
											mv khanhi386 kali-arm64/usr/bin/khanhi386
											mv debian kali-arm64/usr/bin/debian
											mv khanhzoom kali-arm64/usr/bin/khanhzoom
											mv recovery kali-arm64/usr/bin/recovery
											mv khanhaudio_tcp kali-arm64/usr/bin/khanhaudio_tcp
											mv khanh_tcp_stop kali-arm64/usr/bin/khanh_tcp_stop
											mv encryptbash kali-arm64/usr/bin/encryptbash
											mv virtmic kali-arm64/usr/bin/virtmic
											mv virtualmic kali-arm64/usr/bin/virtualmic
											mv khanhnguyen9872 kali-arm64/usr/bin/khanhnguyen9872
											mv fixoffice kali-arm64/usr/bin/fixoffice
											mv khanhip kali-arm64/usr/bin/khanhip
											chmod 777 kali-arm64/usr/bin/khanh
											chmod 777 kali-arm64/usr/bin/khanhaudio_tcp
											chmod 777 kali-arm64/usr/bin/khanh_tcp_stop
											chmod 777 kali-arm64/usr/bin/khanhnguyen9872
											chmod 777 kali-arm64/usr/bin/khanhzoom
											chmod 777 kali-arm64/usr/bin/khanhi386
											chmod 777 kali-arm64/usr/bin/recovery
											chmod 777 kali-arm64/usr/bin/encryptbash
											chmod 777 kali-arm64/usr/bin/virtualmic
											chmod 777 kali-arm64/usr/bin/virtmic
											chmod 777 kali-arm64/usr/bin/debian
											chmod 777 kali-arm64/usr/bin/khanhip
											chmod 777 kali-arm64/usr/bin/fixoffice
											cd .. 2> /dev/null
											mv home/start_ssh usr/bin/start_ssh 2> /dev/null
											mv home/kali usr/bin/kali 2> /dev/null
											chmod 777 usr/bin/kali 2> /dev/null
											chmod 777 usr/bin/start_ssh 2> /dev/null
											printf "%b\n\n" "${green} - Reinstall successfully! \n"
											printf "${green} - You can try run Kali again! \n\n"
										fi
									fi
									read -p " Press Enter to continue " anykey
								fi
								;;
						 [7])
								cd 2> /dev/null
								if [ -f audio.apk ] 2> /dev/null; then
									rm -f audio.apk 2> /dev/null
								fi
								if [ -f micro.apk ] 2> /dev/null; then
									rm -f micro.apk 2> /dev/null
								fi
								wget -O audio.apk "https://github.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/blob/main/app/Audio.apk?raw=true" 2> /dev/null
								mkdir /sdcard/tmp 2> /dev/null
								mv audio.apk /sdcard/tmp/audio.apk 2> /dev/null
    							echo ""
    							echo ""
    							printf " Installing Audio app....."
    							echo ""
    							termux-open /sdcard/tmp/audio.apk
    							read -p "Press Enter to continue!" anykey
    							rm -rf /sdcard/tmp 2> /dev/null
								;;
						 [8])
								cd 2> /dev/null
								if [ -f /sdcard/tmp/audio.apk ] 2> /dev/null; then
									rm -rf /sdcard/tmp 2> /dev/null
								fi
								if [ -f /sdcard/tmp/micro.apk ] 2> /dev/null; then
									rm -rf /sdcard/tmp 2> /dev/null
								fi
								wget -O micro.apk "https://github.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/blob/main/app/Micro.apk?raw=true" 2> /dev/null
								mkdir /sdcard/tmp 2> /dev/null
								mv micro.apk /sdcard/tmp/micro.apk 2> /dev/null
    							echo ""
    							echo ""
    							printf " Installing Micro app....."
    							echo ""
    							termux-open /sdcard/tmp/micro.apk
    							read -p "Press Enter to continue!" anykey
    							rm -rf /sdcard/tmp 2> /dev/null
								;;
						 [4]) 
								if [[ $startssh -eq 1 ]] 2> /dev/null; then
									cd 2> /dev/null
									cd .. 2> /dev/null
									echo 'khanh' > usr/bin/khanhssh 2> /dev/null
									startssh=0 2> /dev/null
									cd 2> /dev/null
									sed -i '/start_ssh/d' ./.bash_profile 2> /dev/null
								else
									startssh=1 2> /dev/null
									cd 2> /dev/null
									echo "start_ssh" >> ./.bash_profile 2> /dev/null
									cd .. 2> /dev/null
									if [ ! -f usr/bin/start_ssh ]; then
										wget -O start_ssh https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/start_ssh 2> /dev/null
										mv start_ssh usr/bin/start_ssh 2> /dev/null
										chmod 777 usr/bin/start_ssh 2> /dev/null
									fi
									if [ ! -f usr/bin/sshd ]; then
										pkg update -y && pkg install openssh -y
									fi
									rm -f usr/bin/khanhssh 2> /dev/null
									cd 2> /dev/null
								fi
								;;
							*)
								;;
					esac
				done
				break
                ;;					
            "About")
				settings=1 2> /dev/null
				while [[ $settings -eq 1 ]] 2> /dev/null; do
                	clear
					printf "${red}\n  @ RECOVERY MENU \n\n"
                	printf "${green} -> KhanhNguyen9872 \n\n\n"
					printf "${yellow} Name: Nguyen Van Khanh \n"
					printf " 1. Facebook\n"
					printf " 2. Youtube\n"
					printf " 3. Github\n"
					printf "${light_cyan} 0. Return to menu (or Enter) ${reset}\n\n"
					read -r -p "Your choose: " response1
					if [[ $response1 -eq 0 ]] 2> /dev/null; then
						settings=0
						break
					fi
					case "$response1" in
					  	[1])
								termux-open-url https://fb.me/khanh10a1 2> /dev/null
								;;
						[2]) 
								termux-open-url https://youtube.com/channel/UC8didcLVaL4iTfbuWBGv51w 2> /dev/null
								;;
					 	[3]) 
								termux-open-url https://github.com/KhanhNguyen9872 2> /dev/null
								;;
							*)
								;;
					esac
				done
				break
                ;;					
            "Uninstall")
				settings=1 2> /dev/null
				while [[ $settings -eq 1 ]] 2> /dev/null; do
                	clear
					printf "${red}\n  @ RECOVERY MENU \n\n"
               		printf "${green} -> Uninstall Kali-Linux \n\n"
					printf "${yellow} 1. Remove Kali-Linux with recovery \n"
					printf " 2. Remove Kali-Linux without recovery \n"
					printf "${light_cyan} 0. Return to menu (or Enter) ${reset} \n\n"
					read -r -p "Your choose: " response1
					if [[ $response1 -eq 0 ]] 2> /dev/null; then
						settings=0
						break
					fi
					case "$response1" in
					  	[2])
								clear
								printf "${red}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Uninstall Kali-Linux \n\n"
								printf "${red} @ WARNING: Uninstall Kali-Linux without recovery! \n"
								read -r -p "Are you sure to uninstall Kali? [Y/N] " response
								case "$response" in
									[y]|[Y]) 
											cd 2> /dev/null
											cd .. 2> /dev/null
											cp home/.bash_profile bash_profile_backup 2> /dev/null
											rm -rf home 2> /dev/null
											mkdir home 2> /dev/null
											cd usr/bin 2> /dev/null
											nonsystem=1 2> /dev/null
											rm -f kali 2> /dev/null
											rm -f version 2> /dev/null
											rm -f versionrestore 2> /dev/null
											cd 2> /dev/null
											cd .. 2> /dev/null
											rm -rf home 2> /dev/null
											mkdir home 2> /dev/null
											mv bash_profile_backup home/.bash_profile 2> /dev/null
											cd 2> /dev/null
											printf "%b\n" "${yellow} Completed uninstall Kali-Linux! \n"
											read -p "Press Enter to exit" anykey
											;;
										*)
											;;
								esac
				             	;;
					  	[1]) 
								clear
								printf "${red}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Uninstall Kali-Linux \n\n"
								printf "${red} @ WARNING: Uninstall Kali-Linux with recovery! \n"
								read -r -p "Are you sure to uninstall Kali? [Y/N] " response
								case "$response" in
									[y]|[Y]) 
											cd 2> /dev/null
											rm ~/.bash_profile 2> /dev/null
											cd .. 2> /dev/null
											rm -rf home 2> /dev/null
											rm -rf home 2> /dev/null
											mkdir home 2> /dev/null
											cd usr/bin 2> /dev/null
											rm -f kali 2> /dev/null
											rm -f settingsupdatekali 2> /dev/null
											rm -f settingsupdate 2> /dev/null
											rm -f khanh 2> /dev/null
											rm -f khanhlocked 2> /dev/null
											rm -f version 2> /dev/null
											rm -f versionrecovery 2> /dev/null
											rm -f recovery 2> /dev/null
											rm -f versionrestore 2> /dev/null
											cd 2> /dev/null
											cd .. 2> /dev/null
											rm -rf home 2> /dev/null
											mkdir home 2> /dev/null
											printf "%b\n" "${yellow} Completed uninstall Kali-Linux! \n"
											printf "%b\n" "${red} Recovery will now exit! \n"
											menu=1
											exit 0
											;;
										*)
											;;
								esac
				             	;;
					   	[3])
							clear
							;;
						*)
							;;
					esac
				done
				break
                ;;
            "Exit" )
				clear
				printf "%b\n" "${green} \n\n - Good bye! \n"
                menu=1 2> /dev/null
				exit 0
                ;;
            "Password" )
				settings=1 2> /dev/null
				while [[ $settings -eq 1 ]] 2> /dev/null; do
					clear
					printf "${red}\n  @ RECOVERY MENU \n\n"
					printf "${green} -> Set Password \n\n"
					if [[ $notset -eq 1 ]] 2> /dev/null; then
						printf "%b\n" "${yellow} Password is not set! \n\n"
						printf "${light_cyan} Do you want setup New Password? [Y/N] ${reset}\n"
						read -p "Your choose: " anykey
						if [ $anykey = 'N' ] 2> /dev/null || [ $anykey = 'n' ] 2> /dev/null; then
							settings=0 2> /dev/null
							break
						fi
						case "$anykey" in
							[y]|[Y]) 
									pass=1
									while [[ $pass -eq 1 ]] 2> /dev/null; do
										clear
										printf "${red}\n  @ RECOVERY MENU \n\n"
										printf "${green} -> Set Password ${reset} \n\n"
										read -p "New password: " password
										read -p "Confirm password: " confirm
										cd 2> /dev/null
										cd .. 2> /dev/null
										cd usr/bin 2> /dev/null
										if [[ $password -eq $confirm ]] 2> /dev/null || [ $password = $confirm ] 2> /dev/null; then
											echo $password > khanh 2> /dev/null
											if [[ $custom -eq 1 ]] 2> /dev/null; then
												printf "\n ${red} Custom Image Detected!\n\n"
											fi
											cd 2> /dev/null
											cd .. 2> /dev/null
											cd usr/bin 2> /dev/null
											if [[ -f khanh ]] 2> /dev/null; then
												pass1="$(grep '' './khanh')" 2> /dev/null
												if [[ $pass1 -eq '' ]] 2> /dev/null; then
													printf "${red}\n\n - Password is not empty! \n"
													cd 2> /dev/null
													cd .. 2> /dev/null
													cd usr/bin 2> /dev/null
													rm -f khanh 2> /dev/null
												else
													cd 2> /dev/null
													wget -O bash_profile https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/.bash_profile 2> /dev/null
													mv bash_profile ~/.bash_profile 2> /dev/null
													cd .. 2> /dev/null
													echo 'khanh' > usr/bin/khanhlocked 2> /dev/null
													lockednum=1 2> /dev/null
													cd 2> /dev/null
													printf "${light_cyan}\n\n - Password is set successfully! \n\n"
													printf "${red}\n WARNING: Termux was locked!\n\n${reset}"
													notset=0 2> /dev/null
												fi
											else
												printf "${red}\n\n - Error when set Password! \n"
												cd 2> /dev/null
												cd .. 2> /dev/null
												cd usr/bin 2> /dev/null
												rm -f khanh 2> /dev/null
											fi
											read -p "Press Enter to exit!" anykey
											break
										else
											printf "${red}\n\n - Password are not the same! \n"
											printf "${red}\n\n - Type again! ${reset}\n"
											read -p "Press Enter to try again!" anykey
										fi
									done
									;;
								*)
									;;
						esac
					else
						cd
						cd ..
						if [ -f usr/bin/khanhlocked ] 2> /dev/null; then
							locked='Locked' 2> /dev/null
							lockednum=1 2> /dev/null
						else
							locked='NOT Locked' 2> /dev/null
							lockednum=0 2> /dev/null
						fi
						if [ -f usr/bin/khanh ] 2> /dev/null; then
							lockkali='Locked' 2> /dev/null
						else
							lockkali='NOT Locked' 2> /dev/null
						fi
						if [[ $nonsystem -eq 1 ]] 2> /dev/null; then
							lockkali='Not Installed' 2> /dev/null
						fi
						if [ -f usr/bin/khanh ] 2> /dev/null; then
							lockrecovery='Locked' 2> /dev/null
						else
							lockrecovery='NOT Locked' 2> /dev/null
						fi
						cd
						clear
						printf "${red}\n  @ RECOVERY MENU \n\n"
						printf "${green} -> Set Password \n\n"
						printf "%b\n" "${yellow} Password was set!\n\n"
						printf "${red} Status:\n"
						printf "  [Recovery: $lockrecovery]\n"
						printf "  [Kali: $lockkali]\n"
						printf "  [Termux: $locked]\n\n"
						echo "=========="
						printf "\n"
						if [[ $lockednum -eq 1 ]] 2> /dev/null; then
							printf "${yellow} 1. Unlock Termux\n"
						else
						printf "${yellow} 1. Lock Termux\n"
						fi
						printf " 2. Change password\n"
						printf " 3. Remove password\n"
						printf "${light_cyan} 0. Return to menu (or Enter) ${reset}\n\n"
						read -r -p "Your choose: " response1
						if [[ $response1 -eq 0 ]] 2> /dev/null; then
							settings=0 2> /dev/null
							break
						fi
						case "$response1" in
							[1])
								if [[ $lockednum -eq 1 ]] 2> /dev/null; then
									clear
									printf "${red}\n  @ RECOVERY MENU \n\n"
									printf "${green} -> Lock Termux \n\n"
									printf "${yellow} Termux is already Locked \n\n"
									printf "\n Lock your Termux for more Security!\n"
									printf "${light_cyan}\n\n @ Do you want to unlock it? [Y/N]\n"
									read -p "Your choose: " unlockchoose
									if [ $unlockchoose = 'y' ] 2> /dev/null || [ $unlockchoose = 'Y' ] 2> /dev/null; then
										printf "\n\n"
										rm -f ~/.bash_profile 2> /dev/null
										if [[ $wake -eq 1 ]] 2> /dev/null; then
											echo "termux-wake-lock" >> ~/.bash_profile 2> /dev/null
										fi
										if [[ $startssh -eq 1 ]] 2> /dev/null; then
											echo "start_ssh" >> ~/.bash_profile 2> /dev/null
										fi
										cd
										cd ..
										rm -f usr/bin/khanhlocked 2> /dev/null
										printf "\n Termux was unlocked!\n"
										lockednum=0 2> /dev/null
										cd
										read -p "Press Enter to exit!" anykey
									fi
								else
									clear
									printf "${red}\n  @ RECOVERY MENU \n\n"
									printf "${green} -> Lock Termux \n\n"
									printf "${yellow} Termux is NOT Locked! \n\n"
									printf "\n Lock your Termux for more Security!\n"
									printf "${light_cyan}\n\n @ Do you want to lock it? [Y/N]\n"
									read -p "Your choose: " unlockchoose
									if [ $unlockchoose = 'y' ] 2> /dev/null || [ $unlockchoose = 'Y' ] 2> /dev/null; then
										printf "\n\n"
										cd
										wget -O bash_profile https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/.bash_profile 2> /dev/null
										if [ -f bash_profile ] 2> /dev/null; then
											bashprofile="$(grep '' './bash_profile')" 2> /dev/null
										else
											printf "${red}\n No connection are available! \n\n"
											printf "${red}\n Required Internet to Lock Termux! \n\n"
											read -p "Press Enter to exit!" anykey
										fi
										if [[ $bashprofile -eq '' ]] 2> /dev/null; then
											printf "${red}\n No connection are available! \n\n"
											printf "${red}\n Required Internet to Lock Termux! \n\n"
											read -p "Press Enter to exit!" anykey
										else
											mv bash_profile ~/.bash_profile 2> /dev/null
											cd .. 2> /dev/null
											rm -f usr/bin/khanhwake 2> /dev/null
											rm -f usr/bin/khanhssh 2> /dev/null
											wake=1 2> /dev/null
											startssh=1 2> /dev/null
											echo 'khanh' > usr/bin/khanhlocked 2> /dev/null
											printf "\n Termux was locked!\n"
											lockednum=1 2> /dev/null
											cd
											read -p "Press Enter to exit!" anykey
										fi
									fi
								fi
				          	 	;;
							[2])
								clear
								printf "${red}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Change Password \n\n"
								printf "${red} @ Are you sure to change Password? [Y/N]\n"
								read -p "Your choose: " changepass1
								if [ $changepass1 = 'y' ] 2> /dev/null || [ $changepass1 = 'Y' ] 2> /dev/null; then
									while [[ $newpass -eq 1 ]] 2> /dev/null; do
										clear
										printf "${red}\n  @ RECOVERY MENU \n\n"
										printf "${green} -> Change Password ${reset} \n\n"
										read -p "New password: " password
										read -p "Confirm password: " confirm
										cd 2> /dev/null
										cd .. 2> /dev/null
										cd usr/bin 2> /dev/null
										if [[ $password -eq $confirm ]] 2> /dev/null || [ $password = $confirm ] 2> /dev/null; then
											if [[ -f khanh ]] 2> /dev/null; then
												if [[ $password -eq '' ]] 2> /dev/null || [ $password = '' ] 2> /dev/null; then
													printf "${red}\n\n - Password is not empty! \n"
												else
													echo $password > khanh 2> /dev/null
													printf "${light_cyan}\n\n - Password is change successfully! \n"
												fi
											else
												printf "${red}\n\n - Error when change Password! \n"
											fi
											read -p "Press Enter to exit!" anykey
											break
										else
											printf "${red}\n\n - Password are not the same! \n"
											printf "${red}\n\n - Type again! ${reset}\n"
											read -p "Press Enter to try again!" anykey
										fi
									done
								fi
				             	;;
							[3])
								clear
								printf "${red}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Remove Password \n\n"
								printf "${red} @ Are you sure to remove Password? [Y/N]\n"
								read -p "Your choose: " anykey
								if [ $anykey = 'y' ] 2> /dev/null || [ $anykey = 'Y' ] 2> /dev/null; then
									printf "\n\n"
									cd 2> /dev/null
									cd .. 2> /dev/null
									rm -f usr/bin/khanh 2> /dev/null 2> /dev/null
									printf "\n Password was removed!\n"
									notset=1 2> /dev/null
									cd
									read -p "Press Enter to exit!" anykey
								fi
				          		;;
							[4])
								clear
								;;
							*)
								;;
						esac
					fi
				done
				break
                ;;
            * )
				break
                ;;
        esac
    done
done
exit 0
