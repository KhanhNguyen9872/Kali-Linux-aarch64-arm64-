#!/bin/bash
red='\033[1;31m'
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;34m'
light_cyan='\033[1;96m'
reset='\033[0m'
khanhnguyen="v1.0"
cd $HOME
wget -O version https://tinyurl.com/53n7htrn 2> /dev/null
wget -O versionrecovery https://tinyurl.com/fvcj5463 2> /dev/null
update="$(grep '' './version')"
updaterecovery="$(grep '' './versionrecovery')"
cd ..
verrecovery="$(grep '' 'usr/bin/versionrecovery')"
ver="$(grep '' 'usr/bin/version')"
cd $HOME
clear
sleep 0.5
echo " @ RECOVERY MODE"
printf "${green}\n - Checking for updates Kali.... \n"
sleep 0.5
if [[ $ver -ge $update ]]; then
	printf "${green} - No updates Kali are available!\n"
	rm -f ~/version 2> /dev/null
else
	rm -f ~/version 2> /dev/null
	printf "${yellow} - New updates Kali are available!\n"
	printf "${yellow} - New version: $update \n"
	printf "${yellow} - Update will keep your personal data! \n\n"
	printf "${light_cyan}\n - Do you want to update now? [Y/N] \n"
	read -r -p "Your choose: " response
	printf "%b\n" " "
	case "$response" in
		[y]|[Y]) 
			cd $HOME
			printf "%b\n" "${yellow} - Updating... \n"
			wget -O kali-khanhnguyenup.sh https://tinyurl.com/9fzu2ex9  2> /dev/null
			wget -O version https://tinyurl.com/53n7htrn 2> /dev/null
			chmod +x ~/kali-khanhnguyenup.sh 2> /dev/null
			sh ~/kali-khanhnguyenup.sh && echo "Process ended!"
			printf "%b" "\n\n"
			rm -f ~/kali-khanhnguyenup.sh 2> /dev/null
			;;
		*)
			;;
	esac
fi
echo "=============================="
printf "${green}\n - Checking for updates Recovery.... \n"
sleep 0.5
if [[ $verrecovery -ge $updaterecovery ]]; then
	printf "${green} - No updates Recovery are available!\n"
	rm -f ~/versionrecovery 2> /dev/null
else
	rm -f ~/versionrecovery 2> /dev/null
	printf "${yellow} - New updates Recovery are available!\n"
	printf "${yellow} - New version: $updaterecovery \n\n"
	printf "${light_cyan}\n - Do you want to update now? [Y/N] \n"
	read -r -p "Your choose: " response
	printf "%b\n" " "
	case "$response" in
		[y]|[Y]) 
			printf "%b\n" "${yellow} - Updating... \n"
			cd $HOME
			wget -O recovery https://tinyurl.com/542f74rn 2> /dev/null
			wget -O versionrecovery https://tinyurl.com/fvcj5463 2> /dev/null
			cd ..
			mv home/recovery usr/bin/recovery
			mv home/versionrecovery usr/bin/versionrecovery
			chmod 777 usr/bin/recovery
			chmod 777 usr/bin/versionrecovery
			cd $HOME
			printf "%b\n\n" "${green} - Update successfully! \n"
			printf "${green} - Run recovery again! \n"
			exit 0
			;;
		*)
			;;
	esac
fi
sleep 1
#####
PS3=' - Your Choose: '
entries=("Continue run Kali-Linux" "Reinstall Kali-Linux" "Backup Image" "Restore Image" "Wipe data" "Uninstall Kali-Linux" "Exit")
while [ "$menu" != 1 ]; do
	clear
	printf "${green}\n  @ RECOVERY MENU \n"
	printf "${green}  @ Version: $khanhnguyen \n\n"
	select choice in "${entries[@]}"
	do 
		case $choice in
			"Continue run Kali-Linux")
				clear
				kali
				menu=1
				exit 0
				;;
			"Reinstall Kali-Linux")
				clear
				printf "${green}\n  @ RECOVERY MENU \n\n"
				printf "${green} -> Reinstall Kali-Linux \n\n"
				printf "${yellow} @ Reinstall will erase current Kali-Linux\n\n"
				read -r -p "Are you sure to reinstall Kali-Linux? [Y/N] " response
				printf "%b\n" " "
				case "$response" in
					 [y]|[Y]) 
						cd $HOME
						rm -rf kali-arm64 2> /dev/null
						wget -O kali-khanhnguyen.sh https://tinyurl.com/ybw4xpmz 2> /dev/null
						chmod +x ~/kali-khanhnguyen.sh 2> /dev/null
						sh ~/kali-khanhnguyen.sh && echo "Process ended!"
						printf "%b" "\n\n"
						;;
					*)
						;;
				esac
				break
				;;
			"Backup Image")  
				clear
				printf "${red}\n  @ RECOVERY MENU \n\n"
				printf "${green} -> Backup Image \n\n"
				printf "${yellow} @ Default location backup is /sdcard \n\n"
				printf "${yellow} @@ High level may take a long time, recommend is 0 \n\n"
				read -p "Compress level (0-9): " level
                printf "%b\n" "\n-----------------\n\n"
				printf "${blue} Target Backup: /sdcard/kali-arm64-backup.tar.xz \n"
				printf "${blue} Target sha512sum: /sdcard/kali-arm64-backup.tar.xz \n\n"
				read -r -p "Are you sure to backup image? [Y/N] " response
				printf "%b\n" " "
				case "$response" in
					[y]|[Y]) 
						cd $HOME
						XZ_OPT=-$level tar cJf - ~/kali-arm64 -P | pv -s $(du -sb kali-arm64 | awk '{print $1}') | gzip > /sdcard/kali-arm64-backup.tar.xz && echo "- Done backup image" > /sdcard/log.txt
							cd /sdcard
							if [ -f kali-arm64-backup.tar.xz ]; then
								7z e kali-arm64-backup.tar.xz
							else
								printf "%b\n" " ${red} - Backup image failed! \n"
								exit 1
							fi
							if [ -f kali-arm64-backup.tar ]; then
								if [ -f kali-arm64-backup.tar.xz ]; then
									rm -f kali-arm64-backup.tar.xz
								fi
								mv kali-arm64-backup.tar kali-arm64-backup.tar.xz
							else
								printf "%b\n" " ${red} - Backup image failed! \n"
								rm -f kali-arm64-backup.tar.xz
								exit 1
							fi
							cd $HOME
							printf "%b\n" " ${yellow} - Completed Backup Image! \n"
							read -p " Press Enter to exit" anykey
							;;
						*)
							;;
				esac
				break
				;;
			"Restore Image")
                clear
				printf "${red}\n  @ RECOVERY MENU \n\n"
                printf "${green} -> Restore Image \n\n"
                printf "${yellow} @ Please move Image to /sdcard and enter name file \n\n"
				printf "${yellow}  @@ Example your file in /sdcard/kali-arm64.tar.xz \n"
                printf "${yellow}  @@ Enter name image: kali-arm64.tar.xz \n"
                printf "${yellow}  @@ Enter name sha512sum: kali-arm64.sha512sum \n\n\n"
                printf "${red}   @@@ Restore image is unstable, may have some error after restore @@@ \n\n\n"
                read -p "Enter Full name image: " restoreimage
				checkfile=/sdcard/$restoreimage
                printf "%b\n" "\n-----------------\n\n"
				printf "${blue} Target Image: /sdcard/$restoreimage \n"
				printf "${red}  @@@ Restore Image will erase current data! \n\n"
                read -r -p "Are you sure to restore image? [Y/N] " response
                case "$response" in
                      [y]|[Y]) 
                             printf "%b\n" "${yellow}\n -- Restore Image is in progress, please wait.... \n"
							 if [ -f $checkfile ]; then
					  			 printf "${green} restore image exist! \n"
							 else
					  			 printf "${red} restore image not exist! \n"
					  			 printf "${red} Please check path restore image file! \n"
								 exit 1
							 fi
							 wget -O khanh https://tinyurl.com/4jaatp7m 2> /dev/null || :
							 chmod +x khanh
							 cd $HOME
							 cp /sdcard/$restoreimage $restoreimage
							 VERSION=20211012
							 USERNAME="kali"
							 IMAGE_NAME=$restoreimage
							 CHROOT=kali-arm64
							 function ask() {
								 while true; do

									 if [ "${2:-}" = "Y" ]; then
										 prompt="Y/n"
										 default=Y
									 elif [ "${2:-}" = "N" ]; then
										 prompt="y/N"
										 default=N
									 else
										 prompt="y/n"
										 default=
									 fi

									 printf "${light_cyan}\n[?] "
									 read -p "$1 [$prompt] " REPLY

									 if [ -z "$REPLY" ]; then
										 REPLY=$default
									 fi

									 printf "${reset}"

									 case "$REPLY" in
										 Y*|y*) return 0 ;;
										 N*|n*) return 1 ;;
									 esac
									 done
									 }

									 function check_dependencies() {
										 printf "${blue}\n[*] Preparing restore....${reset}\n"
										 apt-get update -y &> /dev/null || apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" dist-upgrade -y &> /dev/null
										 apt-get upgrade -y &> /dev/null
										 printf "${blue}[*] - Done ${reset}\n"
									 }

									 function extract_rootfs() {
										 printf "\n${blue}[*] Restoring image..... ${reset}\n"
									     printf "\n${blue}[*]     @ This will take a long time @ ${reset}\n"
										 proot --link2symlink tar -xf $IMAGE_NAME 2> /dev/null || : && echo "- Done"
									 }


									 function create_launcher() {
										 mv ~/khanh ~/kali-arm64/usr/bin 2> /dev/null || :
										 chmod 777 ~/kali-arm64/usr/bin/khanh 2> /dev/null || :
										 KH_RECOVERY=$HOME/kali-arm64/usr/bin/recovery
										 NH_LAUNCHER=${PREFIX}/bin/kali
										 NH_SHORTCUT=${PREFIX}/bin/nh
										 KEX_LAUNCHER=$HOME/kali-arm64/usr/bin/khanh
										 cat > $NH_LAUNCHER <<- EOF
#!/data/data/com.termux/files/usr/bin/bash -e
red='\033[1;31m'
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;34m'
light_cyan='\033[1;96m'
reset='\033[0m'
clear
printf "${blue}##################################################\n"
printf "${blue}##                                              ##\n"
printf "${blue}##  88      a8P         db        88        88  ##\n"
printf "${blue}##  88    .88'         d88b       88        88  ##\n"
printf "${blue}##  88   88'          d8''8b      88        88  ##\n"
printf "${blue}##  88 d88           d8'  '8b     88        88  ##\n"
printf "${blue}##  8888'88.        d8YaaaaY8b    88        88  ##\n"
printf "${blue}##  88P   Y8b      d8''''''''8b   88        88  ##\n"
printf "${blue}##  88     '88.   d8'        '8b  88        88  ##\n"
printf "${blue}##  88       Y8b d8'          '8b 888888888 88  ##\n"
printf "${blue}##                                              ##\n"
printf "${blue}##                 arm64-v8a by KhanhNguyen9872 ##\n"
printf "${blue}##################################################${reset}\n\n"
printf "${yellow}[=] Kali-Linux KhanhNguyen (Thanks<3)${reset}\n\n"
printf "${green}[+] Thong tin lenh, type:${reset}\n"
printf "${green}[+] khanh            # Start Kali-Linux VNC Viewer${reset}\n"
printf "${green}[+] khanh stop       # Stop Kali-Linux VNC Viewer${reset}\n"
printf "${green}[+] su               # Run Kali-Linux as root user${reset}\n"
printf "${green}[+] khanhnguyen9872  # Get Information this Kali-Linux${reset}\n"
printf "${green}[+] recovery         # Run Recovery Mode${reset}\n\n"
cd \${HOME}
unset LD_PRELOAD
if [ ! -f $CHROOT/root/.version ]; then
    touch $CHROOT/root/.version
fi

user="$USERNAME"
home="/home/\$user"
start="sudo -u kali /bin/bash"

if grep -q "kali" ${CHROOT}/etc/passwd; then
    KALIUSR="1";
else
    KALIUSR="0";
fi
if [[ \$KALIUSR == "0" || ("\$#" != "0" && ("\$1" == "-r" || "\$1" == "-R")) ]];then
    user="root"
    home="/\$user"
    start="/bin/bash --login"
    if [[ "\$#" != "0" && ("\$1" == "-r" || "\$1" == "-R") ]];then
        shift
    fi
fi

cmdline="proot \\
        --link2symlink \\
        -0 \\
        -r $CHROOT \\
        -b /dev \\
        -b /sdcard \\
	-b /system \\
        -b /proc \\
        -b $CHROOT\$home:/dev/shm \\
        -w \$home \\
           /usr/bin/env -i \\
           HOME=\$home \\
           PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin \\
           TERM=\$TERM \\
           LANG=C.UTF-8 \\
           \$start"

cmd="\$@"
if [ "\$#" == "0" ];then
    exec \$cmdline
else
    \$cmdline -c "\$cmd"
fi
	EOF
	
										 cat > $KH_RECOVERY <<- EOF
##!/data/data/com.termux/files/usr/bin/bash -e
red='\033[1;31m'
printf "%b\n" "${red}\n Please exit Kali-Linux and run 'recovery' in Termux \n\n"
	EOF

										 chmod 777 $NH_LAUNCHER
										 chmod 777 $KH_RECOVERY
										 chmod 777 $KEX_LAUNCHER
										 if [ -L ${NH_SHORTCUT} ]; then
											 rm -f ${NH_SHORTCUT}
										 fi
										 if [ ! -f ${NH_SHORTCUT} ]; then
											 ln -s ${NH_LAUNCHER} ${NH_SHORTCUT} >/dev/null
										 fi
									 }

									 function fix_profile_bash() {
										 if [ -f ${CHROOT}/root/.bash_profile ]; then
										 sed -i '/if/,/fi/d' "${CHROOT}/root/.bash_profile"
									 fi
									 }

									 function fix_sudo() {
										 chmod +s $CHROOT/usr/bin/sudo
										 chmod +s $CHROOT/usr/bin/su
										 echo "kali    ALL=(ALL:ALL) ALL" > $CHROOT/etc/sudoers.d/kali

										 echo "Set disable_coredump false" > $CHROOT/etc/sudo.conf
									 }

									 function fix_uid() {
										 USRID=$(id -u)
										 GRPID=$(id -g)
										 nh -r usermod -u $USRID kali 2>/dev/null
										 nh -r groupmod -g $GRPID kali 2>/dev/null
									 }
									 red='\033[1;31m'
									 green='\033[1;32m'
									 yellow='\033[1;33m'
									 blue='\033[1;34m'
									 light_cyan='\033[1;96m'
									 reset='\033[0m'

									 EXTRA_ARGS=""
									 if [[ ! -z $1 ]]; then
										 EXTRA_ARGS=$1
										 if [[ $EXTRA_ARGS != "--insecure" ]]; then
											 EXTRA_ARGS=""
										 fi
									 fi
									 cd $HOME
									 check_dependencies
									 extract_rootfs
									 create_launcher
									 fix_profile_bash
									 fix_sudo
									 create_kex_launcher
									 fix_uid
									 clear
									 cd $HOME && mv data/data/com.termux/files/home/kali-arm64 kali-arm64
									 printf "${red}\n  @ RECOVERY MENU \n\n"
									 printf "${green} -> Restore Image \n\n\n\n"
									 printf "${blue} Restore completed! ${reset}\n\n"
									 read -p "Press Enter to exit" anykey
                             ;;
                       *)
                             ;;
                esac
                break
                ;;
            "Wipe data")
                clear
				printf "${red}\n  @ RECOVERY MENU \n\n"
                printf "${green} -> Wipe data \n\n"
                printf "${red} @ WARNING: Wipe data will factory reset users Kali-Linux! \n"
                printf "${red} @ You need backup Image before user this! \n\n\n"
                printf "${red}  @@@ Wipe data is in development and then not allow you use this @@@ \n\n\n"
                read -r -p "Are you sure to wipe data? [Y/N] " response
                case "$response" in
                      [y]|[Y]) 
							 cd $HOME
                             rm -rf ~/kali-arm64/home
                             mkdir ~/kali-arm64/home
                             printf "%b\n" "${yellow} Completed wipe data! \n"
                             read -p " Press any key and Enter to exit" anykey
                             ;;
                       *)
                             ;;
                esac
                break
                ;;
            "Uninstall Kali-Linux")
                clear
				printf "${red}\n  @ RECOVERY MENU \n\n"
                printf "${green} -> Uninstall Kali-Linux \n\n"
				printf "${yellow} 1. Remove Kali-Linux with recovery \n"
				printf "${yellow} 2. Remove Kali-Linux without recovery \n"
				printf "${yellow} 3. Return to menu \n"
				read -r -p "Your choose: " response1
				case "$response1" in
					  [2])
							clear
							printf "${red}\n  @ RECOVERY MENU \n\n"
							printf "${green} -> Uninstall Kali-Linux \n\n"
							printf "${red} @ WARNING: Uninstall Kali-Linux without recovery! \n"
							read -r -p "Are you sure to uninstall Kali? [Y/N] " response
							case "$response" in
								[y]|[Y]) 
										cd $HOME
										rm -rf ~/kali-arm64
										cd ..
										cd usr
										cd bin
										rm -f kali
										printf "%b\n" "${yellow} Completed uninstall Kali-Linux! \n"
										read -p "Press Enter to exit" anykey
										;;
									*)
										;;
							esac
				             ;;
					  [1]) 
							clear
							printf "${red}\n  @ RECOVERY MENU \n\n"
							printf "${green} -> Uninstall Kali-Linux \n\n"
							printf "${red} @ WARNING: Uninstall Kali-Linux with recovery! \n"
							read -r -p "Are you sure to uninstall Kali? [Y/N] " response
							case "$response" in
								[y]|[Y]) 
										cd $HOME
										rm -rf ~/kali-arm64
										cd ..
										cd usr
										cd bin
										rm -f kali
										rm -f recovery
										printf "%b\n" "${yellow} Completed uninstall Kali-Linux! \n"
										printf "%b\n" "${red} Recovery will now exit! \n"
										menu=1
										exit 0
										;;
									*)
										;;
							esac
				             ;;
					   [3])
							clear
							;;
						*)
							;;
				esac
				break
                ;;
            "Exit" )
				clear
				printf "%b\n" "${green} \n\n - Good bye! \n"
                menu=1
				exit 0
                ;;
            * )
                break
                ;;
        esac
    done
done
exit 0
