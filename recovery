#!/bin/bash
clear
red='\033[1;31m'
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;34m'
light_cyan='\033[1;96m'
reset='\033[0m'
cd
cd ..
if [ -f usr/bin/firstbootcheck ] 2> /dev/null; then
	firstbootcheck=1 2> /dev/null
else
	echo 'update_enable' > usr/bin/settingsupdate 2> /dev/null
	echo 'update_enable' > usr/bin/settingsupdatekali 2> /dev/null
	echo 'checkboot' > usr/bin/firstbootcheck 2> /dev/null
fi
clear
cd
cd ..
khanh=usr/bin/khanh
if [ -f $khanh ]; then
	left=4
	khanh1="$(grep '' './usr/bin/khanh')"
	while [[ $left -eq 4 ]] || [[ $left -eq 3 ]] || [[ $left -eq 2 ]] || [[ $left -eq 1 ]]; do
		clear
		if [[ $wrong -eq 1 ]]; then
			printf "\n ${red} - Wrong Password! $left attempts left! ${reset}\n\n"
		fi
		if [[ $left -eq 0 ]]; then
			clear
			printf "\n\n ${red} - Wrong Password! Exit! ${reset}\n\n"
			exit 0
		fi
		printf "${light_cyan}\n   Type your Password! ${reset}\n\n"
		read -p "Password: " anykey
		if [[ $anykey -eq $khanh1 ]] 2> /dev/null || [ $anykey = $khanh1 ] 2> /dev/null; then
			printf "\n ${yellow} - PASS! ${reset}\n"
			newpass=1
			break
		else
			wrong=1
			left=$((left-1))
		fi
	done
	if [[ $left -eq 0 ]]; then
		clear
		printf "\n\n ${red} - Wrong Password! Exit! ${reset}\n\n"
		exit 0
	fi
else
	notset=1
fi
clear
echo "- Booting into Recovery Mode...."
echo "- Preparing..."
echo "- Getting file... "
cd
cd kali-arm64 2> /dev/null
cd bin 2> /dev/null
if [ -f cp ] 2> /dev/null; then
	nonsystem=0 2> /dev/null
else
	nonsystem=1 2> /dev/null
fi
khanhnguyen="v2.0" 2> /dev/null
cd 2> /dev/null
cd .. 2> /dev/null
if [ -f usr/bin/khanhwake ] 2> /dev/null; then
	wake=0
else
	wake=1
fi
if [ -f usr/bin/settingsupdatekali ] 2> /dev/null; then
	wget -O version https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/version 2> /dev/null && echo " " 2> /dev/null
	wget -O changelogver https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/changelogver 2> /dev/null && echo " " 2> /dev/null
	if [ -f changelogver ] 2> /dev/null; then
		updatechangelog="$(grep '' './changelogver')" 2> /dev/null
		rm -f changelogver 2> /dev/null
	else
		nonetwork=1 2> /dev/null
	fi
	if [ -f version ] 2> /dev/null; then
		update="$(grep '' './version')" 2> /dev/null
	else
		nonetwork=1 2> /dev/null
	fi
	if [[ $update -eq '' ]] 2> /dev/null; then
		nonetwork=1 2> /dev/null
	fi
	settingsupdatekalinum=1 2> /dev/null
else
	settingsupdatekalinum=0 2> /dev/null
fi	
cd
cd ..
if [ -f usr/bin/settingsupdate ] 2> /dev/null; then
	wget -O versionrecovery https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/versionrecovery 2> /dev/null && echo " " 2> /dev/null
	wget -O changelogversion https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/changelogversion 2> /dev/null && echo " " 2> /dev/null
	if [ -f changelogversion ] 2> /dev/null; then
		updaterecoverychangelog="$(grep '' './changelogversion')" 2> /dev/null
		rm -f changelogversion 2> /dev/null
	else
		nonetwork=1 2> /dev/null
	fi
	if [ -f versionrecovery ] 2> /dev/null; then
		updaterecovery="$(grep '' './versionrecovery')" 2> /dev/null
	else
		nonetwork=1 2> /dev/null
	fi
	if [[ $updaterecovery -eq '' ]] 2> /dev/null; then
		nonetwork=1 2> /dev/null
	fi
	settingsupdatenum=1 2> /dev/null
else
	settingsupdatenum=0 2> /dev/null
fi
cd 2> /dev/null
cd .. 2> /dev/null
if [ -f usr/bin/version ] 2> /dev/null; then
	ver="$(grep '' 'usr/bin/version')" 2> /dev/null
fi
if [ -f usr/bin/versionrecovery ] 2> /dev/null; then
	verrecovery="$(grep '' 'usr/bin/versionrecovery')" 2> /dev/null
fi
cd 2> /dev/null
clear
sleep 1 2> /dev/null
echo " @ RECOVERY MODE"
printf "${green}\n"
if [[ $settingsupdatekalinum -eq 1 ]] 2> /dev/null; then
	echo "=============================="
	printf "\n"
	printf "${green} - Checking for updates Kali.... \n"
	sleep 0.5 2> /dev/null
	if [[ nonetwork -eq 1 ]] 2> /dev/null; then
		printf "${red}\n No connection are available! \n\n"
		printf "${red} Required Internet to check update! \n\n"
		printf "${red} Skip check for update! \n\n"
		sleep 1 2> /dev/null
	else
		cd ..
		cd home 2> /dev/null
		cd kali-arm64 2> /dev/null
		cd bin 2> /dev/null
		if [ -f cp ] 2> /dev/null; then
			cd 2> /dev/null
			cd .. 2> /dev/null
			if [ -f usr/bin/version ] 2> /dev/null; then
				echo '1' > /dev/null
			else
				if [ -f usr/bin/versionrestore ] 2> /dev/null; then
					printf "${yellow}\n Custom Image is detected! Not Official! \n"
					custom=1 2> /dev/null
				else
					printf "${red}\n Installed / Can't detect version Kali! \n"
					kalifail=1 2> /dev/null
				fi
			fi
		else
			cd
			cd ..
			cd ..
			cd bin 2> /dev/null
			if [ -f cp ] 2> /dev/null; then
				printf "${yellow}\n Detected installed on unknown location!\n"
				printf "${yellow}\n Recovery will now exit!\n"
				exit 0
			else
				printf "${red}\n Kali-Linux is not installed! \n"
				kalifail=1 2> /dev/null
				nonsystem=1 2> /dev/null
				updatek=1 2> /dev/null
			fi
		fi
		cd 2> /dev/null
		if [[ $ver -ge $update ]] 2> /dev/null; then
			printf "${light_cyan} Installed: $ver \n"
			printf "${green} - No updates Kali are available!\n\n"
			rm -f version 2> /dev/null
			sleep 1 2> /dev/null
		else
			if [[ custom -eq 1 ]] 2> /dev/null; then
				rm -f version 2> /dev/null
				printf "${green} Skip check for update! \n\n"
			else
				if [[ kalifail -eq 1 ]] 2> /dev/null; then
					ver="null" 2> /dev/null
				fi
				rm -f version 2> /dev/null
				printf "${light_cyan} Installed: $ver \n"
				printf "${yellow} - New updates Kali are available!\n"
				printf "${yellow} - New version: $update \n"
				printf "${light_cyan}\n - Changelogs: \n"
				echo "$updatechangelog"
				if [[ $updatek -eq 1 ]] 2> /dev/null; then
					echo 'khanh' 2> /dev/null
				else
					printf "${yellow}\n\n - Update will keep your personal data! \n\n"
				fi
				printf "${light_cyan}\n - Do you want to install it now? [Y/N] \n"
				read -r -p "Your choose: " response
				printf "%b\n" " "
				case "$response" in
					[y]|[Y]) 
						cd $HOME
						printf "%b\n" "${yellow} - Updating... \n"
						wget -O freespaceimageupdate https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/freespaceimageupdate 2> /dev/null
						freespace="$(df | grep -o '/data.*%' | grep -o '[0-9]* *[0-9]*%' | grep -o '[0-9][0-9]* ')" 2> /dev/null
						requiredfreespace="$(grep '' './freespaceimageupdate')" 2> /dev/null
						if [[ $freespace -ge $requiredfreespace ]] 2> /dev/null; then
							passfreespace=1
						else
							printf "${red}\n\n Your device don't have enough space!\n"
							printf "${red}\n Do you want to continue?\n\n${reset}"
							read -r -p "Your choose: " response
							if [ $response = 'Y' ] | [ $response = 'y' ]; then
								passfreespace=1
							else
								passfreespace=0
							fi
						fi
						if [[ $passfreespace -eq 1 ]] 2> /dev/null; then
							echo "Free space check: OK"
							echo " "
						else
							echo "Exit!"
							echo " "
							exit
						fi
						wget -O kali-khanhnguyenup.sh https://tinyurl.com/9fzu2ex9 2> /dev/null
						wget -O version https://tinyurl.com/53n7htrn 2> /dev/null
						update5="$(grep '' './kali-khanhnguyenup.sh')"
						update6="$(grep '' './version')"
						if [[ $update5 -eq '' ]]; then
							if [[ $update6 -eq '' ]]; then
								printf "${red}\n No connection are available! \n\n"
								printf "${red} Required Internet to update! \n\n"
								rm -f kali-khanhnguyenup.sh 2> /dev/null
								rm -f version 2> /dev/null
							else
								printf "${red}\n No connection are available! \n\n"
								printf "${red} Required Internet to update! \n\n"
								rm -f kali-khanhnguyenup.sh 2> /dev/null
								rm -f version 2> /dev/null
							fi
						else
							chmod +x ~/kali-khanhnguyenup.sh 2> /dev/null
							sh ~/kali-khanhnguyenup.sh && echo "Process ended!"
							printf "%b" "\n\n"
						fi
						read -p " Press Enter to exit " anykey
						;;
					*)
						;;
				esac
			fi
		fi
	fi
fi
if [[ $settingsupdatenum -eq 1 ]]; then
	echo "=============================="
	printf "\n"
	printf "${green} - Checking for updates Recovery.... \n"
	sleep 0.5
	if [[ nonetwork -eq 1 ]]; then
		printf "${red}\n No connection are available! \n\n"
		printf "${red} Required Internet to check update! \n\n"
		customre=1
	fi
	cd ..
	if [ -f usr/bin/versionrecovery ]; then
		echo '1' > /dev/null
	else
		printf "${red}\n Can't detect version Recovery! \n"
		verrecovery="null"
	fi
	cd
	if [[ $customre -eq 1 ]]; then
		rm -f versionrecovery 2> /dev/null
		printf "${red} Skip check for update! \n\n"
		sleep 5
	else
		if [[ $verrecovery -ge $updaterecovery ]]; then
			printf "${light_cyan} Installed: $verrecovery \n"
			printf "${green} - No updates Recovery are available!\n\n"
			rm -f versionrecovery 2> /dev/null
			echo "=============================="
			sleep 4
		else
			rm -f versionrecovery 2> /dev/null
			printf "${light_cyan} Installed: $verrecovery \n"
			printf "${yellow} - New updates Recovery are available!\n"
			printf "${yellow} - New version: $updaterecovery \n"
			printf "${light_cyan}\n - Changelogs: \n"
			echo "$updaterecoverychangelog"
			printf "${light_cyan}\n\n - Do you want to update it now? [Y/N] \n"
			read -r -p "Your choose: " response
			printf "%b\n" " "
			case "$response" in
				[y]|[Y]) 
					printf "%b\n" "${yellow} - Updating... \n"
					cd
					wget -O recovery https://tinyurl.com/542f74rn 2> /dev/null
					wget -O versionrecovery https://tinyurl.com/fvcj5463 2> /dev/null
					update2="$(grep '' './versionrecovery')"
					if [[ $update2 -eq '' ]]; then
						printf "${red}\n No connection are available! \n"
						printf "${red}\n Required Internet to update Recovery! \n\n"
						rm -f recovery 2> /dev/null
						rm -f versionrecovery 2> /dev/null
					else
						cd ..
						mv home/recovery usr/bin/recovery
						mv home/versionrecovery usr/bin/versionrecovery
						chmod 777 usr/bin/recovery
						chmod 777 usr/bin/versionrecovery						
						printf "%b\n\n" "${green} - Update successfully! \n"
						printf "${green} - Run recovery again! \n\n"
						exit 0
					fi
					read -p " Press Enter to continue " anykey
					;;
				*)
					;;
			esac
		fi
	fi
fi
cd
cd ..
if [ -f usr/bin/version ] 2> /dev/null; then
	ver="$(grep '' 'usr/bin/version')" 2> /dev/null
else
	ver="null"
fi
cd
if [ -f /system/bin/su ] 2> /dev/null; then
	su=1
else
	if [ -f /system/xbin/su ] 2> /dev/null; then
		su=1
	else
		if [ -f /system/bin/magisk ] 2> /dev/null; then
			su=1
		else
			if [ -f /system/bin/supolicy ] 2> /dev/null; then
				su=1
			else
				if [ -f /system/bin/magiskinit ] 2> /dev/null; then
					su=1
				else
					if [ -f /system/xbin/supolicy ] 2> /dev/null; then
						su=1
					else
						if [ -f /sbin/su ] 2> /dev/null; then
							su=1
						else
							if [ -f /data/local/xbin/su ] 2> /dev/null; then
								su=1
							else
								if [ -f /data/local/bin/su ] 2> /dev/null; then
									su=1
								else
									if [ -f /system/sd/xbin/su ] 2> /dev/null; then
										su=1
									else
										if [ -f /data/adb/magisk/magisk32 ] 2> /dev/null; then
											su=1
										else
											if [ -f  /system/app/Superuser.apk ] 2> /dev/null; then
												su=1
											else
												su=0
											fi
										fi
									fi
								fi
							fi
						fi
					fi
				fi
			fi
		fi
	fi
fi
androidver="$(getprop ro.build.version.sdk)"
if [ $androidver -eq 24 ]; then
	androidname="7.0"
else
	if [ $androidver -eq 25 ]; then
		androidname="7.1"
	else
		if [ $androidver -eq 26 ]; then
			androidname="8.0"
		else
			if [ $androidver -eq 27 ]; then
				androidname="8.1"
			else
				if [ $androidver -eq 28 ]; then
					androidname="9"
				else
					if [ $androidver -eq 29 ]; then
						androidname="10"
					else
						if [ $androidver -eq 30 ]; then
							androidname="11"
						else
							if [ $androidver -eq 31 ]; then
								androidname="12"
							else
								androidname="$(grep ro.build.version.release)"
							fi
						fi
					fi
				fi
			fi
		fi
	fi
fi
model="$(getprop ro.product.model)"
manu="$(getprop ro.product.manufacturer)"
keyandroid="$(getprop ro.build.fingerprint)"
id="$(getprop ro.build.id)"
#####
PS3=' - Your Choose: ' 2> /dev/null
entries=("Continue run Kali-Linux" "Set Password" "Reinstall Kali-Linux" "Backup Image" "Restore Image" "Uninstall Kali-Linux" "KhanhNguyen9872" "Settings" "Exit")
while [ "$menu" != 1 ]; do
	freespace="$(df | grep -o '/data.*%' | grep -o '[0-9]* *[0-9]*%' | grep -o '[0-9][0-9]* ')" 2> /dev/null
	freespace1=$((freespace/1024))
	totalspace="$(df -h | awk 'END {print $2}')"
	totalspace1="$(grep -Eo '[0-9]+' <<< $totalspace})"
	totalspace2=$((totalspace1*1024))
	if [[ $freespace1 -eq 0 ]]; then
		freespace="$(df | tr -s ' ' $'\t' | grep data | cut -f4 | awk 'END {print $1}')"
		freespace1=$((freespace/1024))
		key=1
	fi
	if [[ $key -eq 1 ]]; then
			totalspace="$(df | grep '/data' | grep -Eo '[0-9]+' | awk 'NR==1{print $1}')"
			totalspace2=$((totalspace/1024))
	fi
	clear
	printf "${green}\n  @ RECOVERY MENU \n"
	printf "${green}  @ Version: $khanhnguyen \n"
	printf "${green}  @ Version Kali: $ver \n\n"
	printf "${blue}  @ Manufacturer: $manu\n"
	printf "${blue}  @ Model: $model\n"
	printf "${blue}  @ Android $androidname\n"
	printf "${blue}  @ ID: $id\n"
	printf "${blue}  @ Key: $keyandroid\n"
	if [[ $su -eq 1 ]]; then
		printf "${red}  @ Root: YES \n\n${reset}"
	else
		printf "${blue}  @ Root: NO \n\n${reset}"
	fi
	printf "${yellow}    @ Total storage: $totalspace2 MB \n"
	printf "${yellow}    @ Free space:    $freespace1 MB\n\n"
	printf "${red} Menu: ${reset}\n"
	printf "${light_cyan}"
	select choice in "${entries[@]}"
	do 
		case $choice in
			"Continue run Kali-Linux")
				clear
				cd
				cd kali-arm64 2> /dev/null
				cd bin 2> /dev/null
				if [ -f cp ]; then
					kali
					menu=1
					exit 0
				else
					clear
					printf "${green}\n  @ RECOVERY MENU \n\n"
					printf "${green} -> Booting System... \n\n"
					printf "${red}\n Kali-Linux is not installed! \n\n"
					printf "${red} Please install Kali first! \n\n ${reset}"
					nonsystem=1
					read -p " Press Enter to exit " anykey
				fi
				break
				;;
			"Reinstall Kali-Linux")
				settings=1 2> /dev/null
				while [[ $settings -eq 1 ]] 2> /dev/null; do
					clear
					printf "${green}\n  @ RECOVERY MENU \n\n"
					printf "${green} -> Reinstall Kali-Linux \n\n"
					if [[ $nonsystem -eq 1 ]]; then
						printf "${yellow}\n No system are installed! \n\n"
						read -r -p "Are you sure to reinstall Kali-Linux? [Y/N] " response
						printf "%b\n" " "
						case "$response" in
							[y]|[Y]) 
								cd
								wget -O freespaceimage https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/freespaceimage 2> /dev/null
								freespace="$(df | grep -o '/data.*%' | grep -o '[0-9]* *[0-9]*%' | grep -o '[0-9][0-9]* ')" 2> /dev/null
								requiredfreespace="$(grep '' './freespaceimage')" 2> /dev/null
								if [[ $freespace -ge $requiredfreespace ]] 2> /dev/null; then
									passfreespace=1
								else
									printf "${red}\n\n Your device don't have enough space!\n"
									printf "${red}\n Do you want to continue?\n\n${reset}"
									read -r -p "Your choose: " response
									if [ $response = 'Y' ] | [ $response = 'y' ]; then
										passfreespace=1
									else
										passfreespace=0
									fi
								fi
								if [[ $passfreespace -eq 1 ]] 2> /dev/null; then
									echo "Free space check: OK"
									echo " "
								else
									echo "Exit!"
									echo " "
									exit
								fi
								wget -O kali-khanhnguyen.sh https://tinyurl.com/ybw4xpmz 2> /dev/null
								update3="$(grep '' './kali-khanhnguyen.sh')"
								if [[ $update3 -eq '' ]]; then
									printf "${red}\n\n No connection are available! \n\n"
									printf "${red}\n Required Internet to Reinstall Kali! \n\n"
									rm -f kali-khanhnguyen.sh 2> /dev/null
								else
									rm -rf kali-arm64 2> /dev/null
									chmod +x ~/kali-khanhnguyen.sh 2> /dev/null
									sh ~/kali-khanhnguyen.sh && echo "Process ended!"
									rm -f kali-khanhnguyen.sh 2> /dev/null
									printf "%b" "\n\n"
								fi
								read -p " Press Enter to exit " anykey
								;;
							[n]|[N])
								settings=0
								break
								;;
							*)
								;;
						esac
					else
						printf "${yellow} 1. Reinstall with Keep your data\n"
						printf " 2. Reinstall with Lost your data\n"
						printf "${light_cyan} 0. Return to menu (or Enter) ${reset}\n\n"
						read -r -p "Your choose: " response1
						if [[ $response1 -eq 0 ]]; then
							settings=0
							break
						fi
						case "$response1" in
						  	[2])
								clear
								printf "${green}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Reinstall Kali-Linux \n\n"
								printf "${yellow} @ Reinstall will lost your data\n\n"
								read -r -p "Are you sure to reinstall Kali-Linux? [Y/N] " response
								printf "%b\n" " "
								case "$response" in
									[y]|[Y]) 
										cd
										wget -O kali-khanhnguyen.sh https://tinyurl.com/ybw4xpmz 2> /dev/null
										update3="$(grep '' './kali-khanhnguyen.sh')"
										if [[ $update3 -eq '' ]]; then
											printf "${red}\n\n No connection are available! \n\n"
											printf "${red}\n Required Internet to Reinstall Kali! \n\n"
											rm -f kali-khanhnguyen.sh 2> /dev/null
										else
											rm -rf kali-arm64 2> /dev/null
											chmod +x ~/kali-khanhnguyen.sh 2> /dev/null
											wget -O freespaceimage https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/freespaceimage 2> /dev/null
											freespace="$(df | grep -o '/data.*%' | grep -o '[0-9]* *[0-9]*%' | grep -o '[0-9][0-9]* ')" 2> /dev/null
											requiredfreespace="$(grep '' './freespaceimage')" 2> /dev/null
											if [[ $freespace -ge $requiredfreespace ]] 2> /dev/null; then
												passfreespace=1
											else
												printf "${red}\n\n Your device don't have enough space!\n"
												printf "${red}\n Do you want to continue?\n\n${reset}"
												read -r -p "Your choose: " response
												if [ $response = 'Y' ] | [ $response = 'y' ]; then
													passfreespace=1
												else
													passfreespace=0
												fi
											fi
											if [[ $passfreespace -eq 1 ]] 2> /dev/null; then
												echo "Free space check: OK"
												echo " "
											else
												echo "Exit!"
												echo " "
												exit
											fi
											sh ~/kali-khanhnguyen.sh && echo "Process ended!"
											rm -f kali-khanhnguyen.sh 2> /dev/null
											printf "%b" "\n\n"
										fi
										read -p " Press Enter to exit " anykey
										;;
									*)
										;;
								esac
				             	;;
						  	[1]) 
								clear
								printf "${green}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Reinstall Kali-Linux \n\n"
								printf "${yellow} @ Reinstall will keep your data\n\n"
								read -r -p "Are you sure to reinstall Kali-Linux? [Y/N] " response
								printf "%b\n" " "
								case "$response" in
									[y]|[Y]) 
										cd
										wget -O freespaceimageupdate https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/freespaceimageupdate
										freespace="$(df | grep -o '/data.*%' | grep -o '[0-9]* *[0-9]*%' | grep -o '[0-9][0-9]* ')" 2> /dev/null
										requiredfreespace="$(grep '' './freespaceimageupdate')" 2> /dev/null
										if [[ $freespace -ge $requiredfreespace ]] 2> /dev/null; then
											passfreespace=1
										else
											printf "${red}\n Your device don't have enough space!\n"
											printf "${red}\n Do you want to continue?\n\n${reset}"
											read -r -p "Your choose: " response
										fi
										if [ $response = 'Y' ] | [ $response = 'y' ]; then
											passfreespace=1
										else
											passfreespace=0
										fi
										if [[ $passfreespace -eq 1 ]] 2> /dev/null; then
											echo "Free space check: OK"
											echo " "
										else
											echo "Exit!"
											echo " "
											exit
										fi
										wget -O kali-khanhnguyenup.sh https://tinyurl.com/9fzu2ex9 2> /dev/null
										update3="$(grep '' './kali-khanhnguyenup.sh')"
										if [[ $update3 -eq '' ]]; then
											printf "${red}\n\n No connection are available! \n\n"
											printf "${red}\n Required Internet to Reinstall Kali! \n\n"
											rm -f kali-khanhnguyenup.sh 2> /dev/null
										else
											chmod +x ~/kali-khanhnguyenup.sh 2> /dev/null
											sh ~/kali-khanhnguyenup.sh && echo "Process ended!"
											rm -f kali-khanhnguyenup.sh 2> /dev/null
											printf "%b" "\n\n"
										fi
										read -p " Press Enter to exit " anykey
										;;
									*)
										;;
								esac
				         	    ;;
					  		[3])
									;;
								*)
									;;
						esac
					fi
				done
				break
				;;
			"Backup Image")  
				clear
				printf "${red}\n  @ RECOVERY MENU \n\n"
				printf "${green} -> Backup Image \n\n"
				printf "${yellow} @ Default location backup is /sdcard \n\n"
				printf "${yellow} @@ High level may take a long time, recommend is 0 \n\n"
				read -p "Compress level (0-9): " level
                printf "%b\n" "\n-----------------\n\n"
				printf "${blue} Target Backup: /sdcard/kali-arm64-backup.tar.xz \n"
				read -r -p "Are you sure to backup image? [Y/N] " response
				printf "%b\n" " "
				case "$response" in
					[y]|[Y]) 
							cd $HOME
							if [ -f kali-arm64-backup.tar.xz ]; then
								rm -f kali-arm64-backup.tar.xz
							fi
							XZ_OPT=-$level tar cJf - ~/kali-arm64 -P | pv -s $(du -sb kali-arm64 | awk '{print $1}') | gzip > kali-arm64-backup.tar.xz && echo "- Done backup image" > /sdcard/log.txt
							if [ -f kali-arm64-backup.tar.xz ]; then
								7z e kali-arm64-backup.tar.xz
							else
								printf "%b\n" " ${red} - Backup image failed! \n"
								exit 1
							fi
							if [ -f kali-arm64-backup.tar ]; then
								if [ -f kali-arm64-backup.tar.xz ]; then
									rm -f kali-arm64-backup.tar.xz
								fi
								mv kali-arm64-backup.tar kali-arm64-backup.tar.xz
								mv kali-arm64-backup.tar.xz /sdcard/kali-arm64-backup.tar.xz
							else
								printf "%b\n" " ${red} - Backup image failed! \n"
								rm -f kali-arm64-backup.tar.xz
								exit 1
							fi
							clear
							printf "${red}\n  @ RECOVERY MENU \n\n"
							printf "${green} -> Backup Image \n\n"
							printf "${yellow} @ Default location backup is /sdcard \n\n"
							cd $HOME
							if [ -f /sdcard/kali-arm64-backup.tar.xz ]; then
								printf "%b\n" " ${yellow} - Completed Backup Image! \n"
							else
								printf "%b\n" " ${red} - Backup image failed! \n"
								rm -f kali-arm64-backup.tar.xz
								rm -f kali-arm64-backup.tar
								exit 1
							fi
							read -p " Press Enter to exit " anykey
							;;
						*)
							;;
				esac
				break
				;;
			"Restore Image")
                clear
				printf "${red}\n  @ RECOVERY MENU \n\n"
                printf "${green} -> Restore Image \n\n"
                printf "${yellow} @ Please move Image to /sdcard and enter name file \n\n"
				printf "${yellow}  @@ Example your file in /sdcard/kali-arm64.tar.xz \n"
                printf "${yellow}  @@ Enter name image: kali-arm64.tar.xz \n\n"
                read -p "Enter Full name image: " restoreimage
				checkfile=/sdcard/$restoreimage
                printf "%b\n" "\n-----------------\n\n"
				printf "${blue} Target Image: /sdcard/$restoreimage \n"
				printf "${red}  @@@ Restore Image will erase current data! \n\n"
                read -r -p " Are you sure to restore image? [Y/N] " response
                case "$response" in
                      [y]|[Y]) 
                             printf "%b\n" "${yellow}\n -- Restore Image is in progress, please wait.... \n"
							 if [ -f $checkfile ]; then
					  			 printf "${green} restore image exist! \n"
					  			 printf "${yellow}\n -Preparing.... \n"
								 cd $HOME
								 wget -O restore-kali-khanhnguyen.sh https://tinyurl.com/37fhdpjb 2> /dev/null
								 update4="$(grep '' './restore-kali-khanhnguyen.sh')"
								 if [[ $update4 -eq '' ]]; then
							 		 printf "${red}\n\n No connection are available! \n\n"
							 		 printf "${red}\n Required Internet to Restore Image! \n\n"
							 		 rm -f restore-kali-khanhnguyen.sh 2> /dev/null
								 else
								 	 cp /sdcard/$restoreimage restore-khanhnguyen.tar.xz
								 	 rm -rf ~/kali-arm64 2> /dev/null
								     chmod +x ~/restore-kali-khanhnguyen.sh 2> /dev/null
								 	 sh ~/restore-kali-khanhnguyen.sh && echo " - Process ended!"
									 rm -f restore-kali-khanhnguyen.sh 2> /dev/null && rm -f restore-khanhnguyen 2> /dev/null && rm -f restore-khanhnguyen.tar.xz 2> /dev/null
									 clear
									 printf "${red}\n  @ RECOVERY MENU \n\n"
									 printf "${green} -> Restore Image \n\n\n\n"
									 printf "${blue} Restore completed! ${reset}\n\n"
								 fi
							 else
					  			 printf "${red} restore image not exist! \n"
					  			 printf "${red} Please check path restore image file! \n\n"
							 fi
							 read -p "Press Enter to exit" anykey
                             ;;
                       *)
                             ;;
                esac
                break
                ;;
			"Settings")
				settings=1 2> /dev/null
				while [[ $settings -eq 1 ]] 2> /dev/null; do
					cd 2> /dev/null
					cd .. 2> /dev/null
					if [ -f usr/bin/settingsupdate ] 2> /dev/null; then
						settingsupdate='Enabled' 2> /dev/null
						settingsupdatenum=1 2> /dev/null
					else
						settingsupdate='Disabled' 2> /dev/null
						settingsupdatenum=0 2> /dev/null
					fi
					if [ -f usr/bin/settingsupdatekali ] 2> /dev/null; then
						settingsupdatekali='Enabled' 2> /dev/null
						settingsupdatekalinum=1 2> /dev/null
					else
						settingsupdatekali='Disabled' 2> /dev/null
						settingsupdatekalinum=0 2> /dev/null
					fi
					if [[ $wake -eq 1 ]] 2> /dev/null; then
						settingswake='Enabled' 2> /dev/null
					else
						settingswake='Disabled' 2> /dev/null
					fi
					cd 2> /dev/null
                	clear
					printf "${red}\n  @ RECOVERY MENU \n\n"
                	printf "${green} -> Settings \n\n\n"
					printf "${yellow} 1. Check update Recovery [$settingsupdate] \n"
					printf " 2. Check update Kali [$settingsupdatekali] \n"
					printf " 3. Wake Lock [$settingswake] \n"
					printf "${light_cyan} 0. Return to menu (or Enter) ${reset}\n\n"
					read -r -p "Your choose: " response1
					if [[ $response1 -eq 0 ]]; then
						settings=0
						break
					fi
					case "$response1" in
						 [1])	
								if [[ $settingsupdatenum -eq 1 ]] 2> /dev/null; then
									cd 2> /dev/null
									cd .. 2> /dev/null
									rm -f usr/bin/settingsupdate 2> /dev/null
									settingsupdatenum=0 2> /dev/null
								else
									cd 2> /dev/null
									cd .. 2> /dev/null
									echo 'update_enable' > usr/bin/settingsupdate
									settingsupdatenum=1 2> /dev/null
								fi
								;;
					 	 [2]) 
								if [[ $settingsupdatekalinum -eq 1 ]] 2> /dev/null; then
									cd 2> /dev/null
									cd .. 2> /dev/null
									rm -f usr/bin/settingsupdatekali 2> /dev/null
									settingsupdatekalinum=0 2> /dev/null
								else
									cd 2> /dev/null
									cd .. 2> /dev/null
									echo 'update_enable' > usr/bin/settingsupdatekali
									settingsupdatekalinum=1 2> /dev/null
								fi
								;;
						 [3]) 
								if [[ $wake -eq 1 ]] 2> /dev/null; then
									cd
									cd ..
									echo 'khanh' > usr/bin/khanhwake
									wake=0 2> /dev/null
									cd
									sed -i '/termux-wake-lock/d' ./.bash_profile
									termux-wake-unlock
								else
									wake=1 2> /dev/null
									cd
									echo "termux-wake-lock" >> ./.bash_profile
									cd ..
									rm -f usr/bin/khanhwake
									cd
									termux-wake-lock
								fi
								;;
							*)
								;;
					esac
				done
				break
                ;;					
            "KhanhNguyen9872")
				settings=1 2> /dev/null
				while [[ $settings -eq 1 ]] 2> /dev/null; do
                	clear
					printf "${red}\n  @ RECOVERY MENU \n\n"
                	printf "${green} -> KhanhNguyen9872 \n\n\n"
					printf "${yellow} Name: Nguyen Van Khanh \n"
					printf " 1. Facebook\n"
					printf " 2. Youtube\n"
					printf " 3. Github\n"
					printf "${light_cyan} 0. Return to menu (or Enter) ${reset}\n\n"
					read -r -p "Your choose: " response1
					if [[ $response1 -eq 0 ]]; then
						settings=0
						break
					fi
					case "$response1" in
					  	[1])
								termux-open-url https://fb.me/khanh10a1
								;;
						[2]) 
								termux-open-url https://youtube.com/channel/UC8didcLVaL4iTfbuWBGv51w
								;;
					 	[3]) 
								termux-open-url https://github.com/KhanhNguyen9872
								;;
							*)
								;;
					esac
				done
				break
                ;;					
            "Uninstall Kali-Linux")
				settings=1 2> /dev/null
				while [[ $settings -eq 1 ]] 2> /dev/null; do
                	clear
					printf "${red}\n  @ RECOVERY MENU \n\n"
               		printf "${green} -> Uninstall Kali-Linux \n\n"
					printf "${yellow} 1. Remove Kali-Linux with recovery \n"
					printf " 2. Remove Kali-Linux without recovery \n"
					printf "${light_cyan} 0. Return to menu (or Enter) ${reset} \n\n"
					read -r -p "Your choose: " response1
					if [[ $response1 -eq 0 ]]; then
						settings=0
						break
					fi
					case "$response1" in
					  	[2])
								clear
								printf "${red}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Uninstall Kali-Linux \n\n"
								printf "${red} @ WARNING: Uninstall Kali-Linux without recovery! \n"
								read -r -p "Are you sure to uninstall Kali? [Y/N] " response
								case "$response" in
									[y]|[Y]) 
											cd
											cd ..
											rm -rf home
											mkdir home
											cd usr/bin
											nonsystem=1
											rm -f kali
											rm -f version
											rm -f versionrestore
											printf "%b\n" "${yellow} Completed uninstall Kali-Linux! \n"
											read -p "Press Enter to exit" anykey
											;;
										*)
											;;
								esac
				             	;;
					  	[1]) 
								clear
								printf "${red}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Uninstall Kali-Linux \n\n"
								printf "${red} @ WARNING: Uninstall Kali-Linux with recovery! \n"
								read -r -p "Are you sure to uninstall Kali? [Y/N] " response
								case "$response" in
									[y]|[Y]) 
											cd
											rm ~/.bash_profile
											cd ..
											rm -rf home
											mkdir home
											cd usr/bin
											rm -f kali
											rm -f settingsupdatekali
											rm -f settingsupdate
											rm -f khanh
											rm -f khanhlocked
											rm -f version
											rm -f versionrecovery
											rm -f recovery
											rm -f versionrestore
											printf "%b\n" "${yellow} Completed uninstall Kali-Linux! \n"
											printf "%b\n" "${red} Recovery will now exit! \n"
											menu=1
											exit 0
											;;
										*)
											;;
								esac
				             	;;
					   	[3])
							clear
							;;
						*)
							;;
					esac
				done
				break
                ;;
            "Exit" )
				clear
				printf "%b\n" "${green} \n\n - Good bye! \n"
                menu=1
				exit 0
                ;;
            "Set Password" )
				settings=1 2> /dev/null
				while [[ $settings -eq 1 ]] 2> /dev/null; do
					clear
					printf "${red}\n  @ RECOVERY MENU \n\n"
					printf "${green} -> Set Password \n\n"
					if [[ $notset -eq 1 ]]; then
						printf "%b\n" "${yellow} Password is not set! \n\n"
						printf "${light_cyan} Do you want setup New Password? [Y/N] ${reset}\n"
						read -p "Your choose: " anykey
						if [ $anykey = 'N' ] 2> /dev/null || [ $anykey = 'n' ] 2> /dev/null; then
							settings=0
							break
						fi
						case "$anykey" in
							[y]|[Y]) 
									pass=1
									while [[ $pass -eq 1 ]]; do
										clear
										printf "${red}\n  @ RECOVERY MENU \n\n"
										printf "${green} -> Set Password ${reset} \n\n"
										read -p "New password: " password
										read -p "Confirm password: " confirm
										cd
										cd ..
										cd usr/bin
										if [[ $password -eq $confirm ]] 2> /dev/null || [ $password = $confirm ] 2> /dev/null; then
											echo $password > khanh
											if [[ $custom -eq 1 ]]; then
												printf "\n ${red} Custom Image Detected!\n\n"
											fi
											cd
											cd ..
											cd usr/bin
											if [[ -f khanh ]]; then
												pass1="$(grep '' './khanh')"
												if [[ $pass1 -eq '' ]] 2> /dev/null; then
													printf "${red}\n\n - Password is not empty! \n"
													cd
													cd ..
													cd usr/bin
													rm -f khanh
												else
													cd
													wget -O bash_profile https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/.bash_profile 2> /dev/null
													mv bash_profile ~/.bash_profile 2> /dev/null
													cd ..
													echo 'khanh' > usr/bin/khanhlocked 2> /dev/null
													lockednum=1
													cd
													printf "${light_cyan}\n\n - Password is set successfully! \n\n"
													printf "${red}\n WARNING: Termux was locked!\n\n${reset}"
													notset=0
												fi
											else
												printf "${red}\n\n - Error when set Password! \n"
												cd
												cd ..
												cd usr/bin
												rm -f khanh
											fi
											read -p "Press Enter to exit!" anykey
											break
										else
											printf "${red}\n\n - Password are not the same! \n"
											printf "${red}\n\n - Type again! ${reset}\n"
											read -p "Press Enter to try again!" anykey
										fi
									done
									;;
								*)
									;;
						esac
					else
						cd
						cd ..
						if [ -f usr/bin/khanhlocked ]; then
							locked='Locked'
							lockednum=1
						else
							locked='NOT Locked'
							lockednum=0
						fi
						if [ -f usr/bin/khanh ]; then
							lockkali='Locked'
						else
							lockkali='NOT Locked'
						fi
						if [ -f usr/bin/khanh ]; then
							lockrecovery='Locked'
						else
							lockrecovery='NOT Locked'
						fi
						cd
						clear
						printf "${red}\n  @ RECOVERY MENU \n\n"
						printf "${green} -> Set Password \n\n"
						printf "%b\n" "${yellow} Password was set!\n\n"
						printf "${red} Status:\n"
						printf "  [Recovery: $lockrecovery]\n"
						printf "  [Kali: $lockkali]\n"
						printf "  [Termux: $locked]\n\n"
						echo "=========="
						printf "\n"
						if [[ $lockednum -eq 1 ]]; then
							printf "${yellow} 1. Unlock Termux\n"
						else
						printf "${yellow} 1. Lock Termux\n"
						fi
						printf " 2. Change password\n"
						printf " 3. Remove password\n"
						printf "${light_cyan} 0. Return to menu (or Enter) ${reset}\n\n"
						read -r -p "Your choose: " response1
						if [[ $response1 -eq 0 ]]; then
							settings=0
							break
						fi
						case "$response1" in
							[1])
								if [[ $lockednum -eq 1 ]]; then
									clear
									printf "${red}\n  @ RECOVERY MENU \n\n"
									printf "${green} -> Lock Termux \n\n"
									printf "${yellow} Termux is already Locked \n\n"
									printf "\n Lock your Termux for more Security!\n"
									printf "${light_cyan}\n\n @ Do you want to unlock it? [Y/N]\n"
									read -p "Your choose: " unlockchoose
									if [ $unlockchoose = 'y' ] || [ $unlockchoose = 'Y' ]; then
										printf "\n\n"
										if [[ $wake -eq 1 ]] 2> /dev/null; then
											echo "termux-wake-lock" > ~/.bash_profile
										else
											rm -f ~/.bash_profile
										fi
										cd
										cd ..
										rm -f usr/bin/khanhlocked 2> /dev/null
										printf "\n Termux was unlocked!\n"
										lockednum=0
										cd
										read -p "Press Enter to exit!" anykey
									fi
								else
									clear
									printf "${red}\n  @ RECOVERY MENU \n\n"
									printf "${green} -> Lock Termux \n\n"
									printf "${yellow} Termux is NOT Locked! \n\n"
									printf "\n Lock your Termux for more Security!\n"
									printf "${light_cyan}\n\n @ Do you want to lock it? [Y/N]\n"
									read -p "Your choose: " unlockchoose
									if [ $unlockchoose = 'y' ] || [ $unlockchoose = 'Y' ]; then
										printf "\n\n"
										cd
										wget -O bash_profile https://raw.githubusercontent.com/KhanhNguyen9872/Kali-Linux-aarch64-arm64-/main/.bash_profile 2> /dev/null
										if [ -f bash_profile ]; then
											bashprofile="$(grep '' './bash_profile')"
										else
											printf "${red}\n No connection are available! \n\n"
											printf "${red}\n Required Internet to Lock Termux! \n\n"
											read -p "Press Enter to exit!" anykey
										fi
										if [[ $bashprofile -eq '' ]] 2> /dev/null; then
											printf "${red}\n No connection are available! \n\n"
											printf "${red}\n Required Internet to Lock Termux! \n\n"
											read -p "Press Enter to exit!" anykey
										else
											mv bash_profile ~/.bash_profile 2> /dev/null
											cd ..
											rm -f usr/bin/khanhwake 2> /dev/null
											wake=1
											echo 'khanh' > usr/bin/khanhlocked 2> /dev/null
											printf "\n Termux was locked!\n"
											lockednum=1
											cd
											read -p "Press Enter to exit!" anykey
										fi
									fi
								fi
				          	 	;;
							[2])
								clear
								printf "${red}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Change Password \n\n"
								printf "${red} @ Are you sure to change Password? [Y/N]\n"
								read -p "Your choose: " changepass1
								if [ $changepass1 = 'y' ] || [ $changepass1 = 'Y' ]; then
									while [[ $newpass -eq 1 ]]; do
										clear
										printf "${red}\n  @ RECOVERY MENU \n\n"
										printf "${green} -> Change Password ${reset} \n\n"
										read -p "New password: " password
										read -p "Confirm password: " confirm
										cd
										cd ..
										cd usr/bin
										if [[ $password -eq $confirm ]] 2> /dev/null || [ $password = $confirm ] 2> /dev/null; then
											if [[ -f khanh ]]; then
												if [[ $password -eq '' ]] 2> /dev/null || [ $password = '' ] 2> /dev/null; then
													printf "${red}\n\n - Password is not empty! \n"
												else
													echo $password > khanh
													printf "${light_cyan}\n\n - Password is change successfully! \n"
												fi
											else
												printf "${red}\n\n - Error when change Password! \n"
											fi
											read -p "Press Enter to exit!" anykey
											break
										else
											printf "${red}\n\n - Password are not the same! \n"
											printf "${red}\n\n - Type again! ${reset}\n"
											read -p "Press Enter to try again!" anykey
										fi
									done
								fi
				             	;;
							[3])
								clear
								printf "${red}\n  @ RECOVERY MENU \n\n"
								printf "${green} -> Remove Password \n\n"
								printf "${red} @ Are you sure to remove Password? [Y/N]\n"
								read -p "Your choose: " removepass
								if [ $removepass = 'y' ] || [ $removepass = 'Y' ]; then
									printf "\n\n"
									cd
									cd ..
									rm -f usr/bin/khanh 2> /dev/null
									printf "\n Password was removed!\n"
									notset=1
									cd
									read -p "Press Enter to exit!" anykey
								fi
				          		;;
							[4])
								clear
								;;
							*)
								;;
						esac
					fi
				done
				break
                ;;
            * )
				break
                ;;
        esac
    done
done
exit 0
